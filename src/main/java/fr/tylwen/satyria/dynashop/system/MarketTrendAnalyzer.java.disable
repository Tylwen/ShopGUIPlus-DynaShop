/*
 * ShopGUI+ DynaShop - Dynamic Economy Addon for Minecraft
 * Copyright (C) 2025 Tylwen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package fr.tylwen.satyria.dynashop.system;

import fr.tylwen.satyria.dynashop.DynaShopPlugin;
import fr.tylwen.satyria.dynashop.system.chart.PriceHistory;
import fr.tylwen.satyria.dynashop.system.chart.PriceHistory.PriceDataPoint;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * Analyseur de tendances du marché
 */
public class MarketTrendAnalyzer {
    
    private final DynaShopPlugin plugin;
    
    public MarketTrendAnalyzer(DynaShopPlugin plugin) {
        this.plugin = plugin;
    }
    
    /**
     * Analyse la tendance du marché pour un item spécifique
     * 
     * @param shopId ID du shop
     * @param itemId ID de l'item
     * @param days Nombre de jours à analyser
     * @return Objet contenant les données de tendance
     */
    public MarketTrend analyzeTrend(String shopId, String itemId, int days) {
        // Récupérer l'historique des prix
        PriceHistory history = plugin.getStorageManager().getPriceHistory(shopId, itemId);
        List<PriceDataPoint> dataPoints = history.getDataPoints();
        
        // Filtrer les points de données pour la période demandée
        LocalDateTime startDate = LocalDateTime.now().minusDays(days);
        List<PriceDataPoint> filteredPoints = dataPoints.stream()
            .filter(p -> p.getTimestamp().isAfter(startDate))
            .collect(Collectors.toList());
        
        // S'il n'y a pas assez de données, retourner une tendance UNKNOWN
        if (filteredPoints.size() < 5) {
            return new MarketTrend(TrendType.UNKNOWN, 0, 0, 0, 0, List.of(), List.of(), List.of());
        }
        
        // Analyse de base de la tendance
        TrendType trendType = calculateBasicTrend(filteredPoints);
        double strength = calculateTrendStrength(filteredPoints);
        double volatility = calculateVolatility(filteredPoints);
        
        // Calculer les variations de prix et volume
        double priceChange = calculatePriceChange(filteredPoints);
        double volumeChange = calculateVolumeChange(filteredPoints);
        
        // Générer des prévisions
        List<Map<String, Object>> forecastData = generateForecastData(filteredPoints, 7);
        
        // Calculer les niveaux de support et résistance
        List<Double> supportLevels = calculateSupportLevels(filteredPoints);
        List<Double> resistanceLevels = calculateResistanceLevels(filteredPoints);
        
        return new MarketTrend(trendType, strength, volatility, priceChange, volumeChange, 
                               forecastData, supportLevels, resistanceLevels);
    }
    
    /**
     * Détermine la tendance de base (hausse, baisse, stable, volatile)
     */
    private TrendType calculateBasicTrend(List<PriceDataPoint> points) {
        // Utiliser la régression linéaire pour déterminer la tendance
        double[] prices = points.stream()
            .mapToDouble(PriceDataPoint::getCloseBuyPrice)
            .filter(price -> price > 0)
            .toArray();
        
        if (prices.length < 3) {
            return TrendType.UNKNOWN;
        }
        
        double[] trend = calculateLinearTrend(prices);
        double slope = trend[0]; // coefficient directeur
        
        // Calculer la volatilité
        double volatility = calculateVolatility(points);
        
        // Déterminer le type de tendance
        if (Math.abs(slope) < 0.001) {
            return TrendType.STABLE;
        } else if (volatility > 0.15) { // Seuil arbitraire de volatilité
            return TrendType.VOLATILE;
        } else if (slope > 0) {
            return TrendType.RISING;
        } else {
            return TrendType.FALLING;
        }
    }
    
    /**
     * Calcule la force de la tendance (0-1)
     */
    private double calculateTrendStrength(List<PriceDataPoint> points) {
        double[] prices = points.stream()
            .mapToDouble(PriceDataPoint::getCloseBuyPrice)
            .filter(price -> price > 0)
            .toArray();
        
        if (prices.length < 3) {
            return 0;
        }
        
        double[] trend = calculateLinearTrend(prices);
        double slope = trend[0]; // coefficient directeur
        double intercept = trend[1]; // ordonnée à l'origine
        
        // Calculer le R² (coefficient de détermination)
        double rSquared = calculateRSquared(prices, slope, intercept);
        
        // La force de la tendance est directement liée au R²
        return Math.min(1.0, Math.abs(rSquared));
    }
    
    /**
     * Calcule la volatilité du prix (écart-type relatif)
     */
    private double calculateVolatility(List<PriceDataPoint> points) {
        double[] prices = points.stream()
            .mapToDouble(PriceDataPoint::getCloseBuyPrice)
            .filter(price -> price > 0)
            .toArray();
        
        if (prices.length < 3) {
            return 0;
        }
        
        // Calculer l'écart-type
        double mean = Arrays.stream(prices).average().orElse(0);
        double variance = Arrays.stream(prices)
            .map(p -> Math.pow(p - mean, 2))
            .sum() / prices.length;
        double stdDev = Math.sqrt(variance);
        
        // Normaliser par le prix moyen pour obtenir une volatilité relative
        return mean > 0 ? stdDev / mean : 0;
    }
    
    /**
     * Calcule le pourcentage de variation de prix
     */
    private double calculatePriceChange(List<PriceDataPoint> points) {
        if (points.isEmpty()) return 0;
        
        double firstPrice = points.get(0).getCloseBuyPrice();
        double lastPrice = points.get(points.size() - 1).getCloseBuyPrice();
        
        if (firstPrice <= 0) return 0;
        
        return ((lastPrice - firstPrice) / firstPrice) * 100;
    }
    
    /**
     * Calcule le pourcentage de variation de volume
     */
    private double calculateVolumeChange(List<PriceDataPoint> points) {
        if (points.size() < 2) return 0;
        
        // Diviser la période en deux pour comparer les volumes
        int midPoint = points.size() / 2;
        
        double volumeFirstHalf = points.subList(0, midPoint).stream()
            .mapToDouble(PriceDataPoint::getVolume)
            .sum();
        
        double volumeSecondHalf = points.subList(midPoint, points.size()).stream()
            .mapToDouble(PriceDataPoint::getVolume)
            .sum();
        
        if (volumeFirstHalf <= 0) return 0;
        
        return ((volumeSecondHalf - volumeFirstHalf) / volumeFirstHalf) * 100;
    }
    
    /**
     * Génère des données de prévision basées sur l'historique
     */
    private List<Map<String, Object>> generateForecastData(List<PriceDataPoint> points, int daysToForecast) {
        List<Map<String, Object>> forecast = new ArrayList<>();
        
        // Extraire les prix pour la régression
        double[] prices = points.stream()
            .mapToDouble(PriceDataPoint::getCloseBuyPrice)
            .filter(price -> price > 0)
            .toArray();
        
        if (prices.length < 5) {
            return forecast; // Pas assez de données pour la prévision
        }
        
        // Calculer la tendance linéaire
        double[] trend = calculateLinearTrend(prices);
        double slope = trend[0];
        double intercept = trend[1];
        
        // Dernière date connue
        LocalDateTime lastDate = points.get(points.size() - 1).getTimestamp();
        
        // Générer les prévisions
        for (int i = 1; i <= daysToForecast; i++) {
            LocalDateTime forecastDate = lastDate.plusDays(i);
            
            // Prévision de prix (position x dans la série)
            double forecastPrice = intercept + slope * (prices.length + i);
            
            // Ajouter une marge d'erreur (±10%)
            double errorMargin = forecastPrice * 0.1;
            
            Map<String, Object> forecastPoint = new HashMap<>();
            forecastPoint.put("date", forecastDate.toString());
            forecastPoint.put("price", Math.max(0.01, forecastPrice));
            forecastPoint.put("lowEstimate", Math.max(0.01, forecastPrice - errorMargin));
            forecastPoint.put("highEstimate", forecastPrice + errorMargin);
            
            forecast.add(forecastPoint);
        }
        
        return forecast;
    }
    
    /**
     * Calcule les niveaux de support (prix où les baisses ont tendance à s'arrêter)
     */
    private List<Double> calculateSupportLevels(List<PriceDataPoint> points) {
        // Trouver les minima locaux
        List<Double> minimaPrices = findLocalMinima(points);
        
        // Regrouper les minima proches
        return clusterPriceLevels(minimaPrices);
    }
    
    /**
     * Calcule les niveaux de résistance (prix où les hausses ont tendance à s'arrêter)
     */
    private List<Double> calculateResistanceLevels(List<PriceDataPoint> points) {
        // Trouver les maxima locaux
        List<Double> maximaPrices = findLocalMaxima(points);
        
        // Regrouper les maxima proches
        return clusterPriceLevels(maximaPrices);
    }
    
    /**
     * Trouve les minima locaux dans les données de prix
     */
    private List<Double> findLocalMinima(List<PriceDataPoint> points) {
        List<Double> minima = new ArrayList<>();
        
        // On a besoin d'au moins 3 points pour trouver un minimum local
        if (points.size() < 3) return minima;
        
        for (int i = 1; i < points.size() - 1; i++) {
            double prev = points.get(i - 1).getLowBuyPrice();
            double current = points.get(i).getLowBuyPrice();
            double next = points.get(i + 1).getLowBuyPrice();
            
            // Si le point courant est un minimum local
            if (current > 0 && current < prev && current < next) {
                minima.add(current);
            }
        }
        
        return minima;
    }
    
    /**
     * Trouve les maxima locaux dans les données de prix
     */
    private List<Double> findLocalMaxima(List<PriceDataPoint> points) {
        List<Double> maxima = new ArrayList<>();
        
        // On a besoin d'au moins 3 points pour trouver un maximum local
        if (points.size() < 3) return maxima;
        
        for (int i = 1; i < points.size() - 1; i++) {
            double prev = points.get(i - 1).getHighBuyPrice();
            double current = points.get(i).getHighBuyPrice();
            double next = points.get(i + 1).getHighBuyPrice();
            
            // Si le point courant est un maximum local
            if (current > prev && current > next) {
                maxima.add(current);
            }
        }
        
        return maxima;
    }
    
    /**
     * Regroupe les niveaux de prix proches pour identifier les zones de support/résistance
     */
    private List<Double> clusterPriceLevels(List<Double> prices) {
        if (prices.isEmpty()) return List.of();
        
        // Trier les prix
        List<Double> sortedPrices = new ArrayList<>(prices);
        Collections.sort(sortedPrices);
        
        // Calculer le prix moyen pour déterminer la tolérance de regroupement
        double avgPrice = sortedPrices.stream().mapToDouble(Double::doubleValue).average().orElse(0);
        double clusterTolerance = avgPrice * 0.05; // 5% de tolérance
        
        // Regrouper les niveaux proches
        List<Double> clusters = new ArrayList<>();
        List<Double> currentCluster = new ArrayList<>();
        
        for (double price : sortedPrices) {
            if (currentCluster.isEmpty()) {
                currentCluster.add(price);
            } else {
                double clusterAvg = currentCluster.stream().mapToDouble(Double::doubleValue).average().orElse(0);
                
                if (Math.abs(price - clusterAvg) <= clusterTolerance) {
                    // Ajouter au cluster existant
                    currentCluster.add(price);
                } else {
                    // Finaliser le cluster actuel et en commencer un nouveau
                    clusters.add(currentCluster.stream().mapToDouble(Double::doubleValue).average().orElse(0));
                    currentCluster = new ArrayList<>();
                    currentCluster.add(price);
                }
            }
        }
        
        // Ajouter le dernier cluster
        if (!currentCluster.isEmpty()) {
            clusters.add(currentCluster.stream().mapToDouble(Double::doubleValue).average().orElse(0));
        }
        
        return clusters;
    }
    
    /**
     * Calcule la tendance linéaire (régression linéaire)
     * @return double[] avec [0] = coefficient directeur, [1] = ordonnée à l'origine
     */
    private double[] calculateLinearTrend(double[] prices) {
        int n = prices.length;
        
        // Calcul des sommes nécessaires
        double sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0;
        for (int i = 0; i < n; i++) {
            sumX += i;
            sumY += prices[i];
            sumXY += i * prices[i];
            sumX2 += i * i;
        }
        
        // Calcul des coefficients de régression (y = ax + b)
        double denominator = n * sumX2 - sumX * sumX;
        if (Math.abs(denominator) < 1e-10) {
            // Éviter la division par zéro
            return new double[] { 0, prices.length > 0 ? prices[0] : 0 };
        }
        
        double a = (n * sumXY - sumX * sumY) / denominator;
        double b = (sumY - a * sumX) / n;
        
        return new double[] { a, b };
    }
    
    /**
     * Calcule le coefficient de détermination R²
     */
    private double calculateRSquared(double[] prices, double slope, double intercept) {
        int n = prices.length;
        
        // Calcul de la moyenne
        double mean = Arrays.stream(prices).average().orElse(0);
        
        // Calcul de SST (Sum of Squares Total)
        double sst = 0;
        for (double price : prices) {
            sst += Math.pow(price - mean, 2);
        }
        
        // Calcul de SSR (Sum of Squares Regression)
        double ssr = 0;
        for (int i = 0; i < n; i++) {
            double fitted = intercept + slope * i;
            ssr += Math.pow(fitted - mean, 2);
        }
        
        // R² = SSR/SST
        return sst > 0 ? ssr / sst : 0;
    }
    
    /**
     * Types de tendances possibles
     */
    public enum TrendType {
        RISING,     // Tendance à la hausse
        FALLING,    // Tendance à la baisse
        STABLE,     // Prix stable
        VOLATILE,   // Prix volatil (hausse et baisse fréquentes)
        UNKNOWN     // Pas assez de données pour déterminer
    }
    
    /**
     * Classe représentant une tendance de marché
     */
    public static class MarketTrend {
        private final TrendType trendType;
        private final double strength;         // Force de la tendance (0-1)
        private final double volatility;       // Volatilité (0-1)
        private final double priceChangePercent;  // Variation de prix en %
        private final double volumeChangePercent; // Variation de volume en %
        private final List<Map<String, Object>> forecastData;  // Données de prévision
        private final List<Double> supportLevels;    // Niveaux de support
        private final List<Double> resistanceLevels; // Niveaux de résistance
        
        public MarketTrend(TrendType trendType, double strength, double volatility, 
                          double priceChangePercent, double volumeChangePercent,
                          List<Map<String, Object>> forecastData, 
                          List<Double> supportLevels, List<Double> resistanceLevels) {
            this.trendType = trendType;
            this.strength = strength;
            this.volatility = volatility;
            this.priceChangePercent = priceChangePercent;
            this.volumeChangePercent = volumeChangePercent;
            this.forecastData = forecastData;
            this.supportLevels = supportLevels;
            this.resistanceLevels = resistanceLevels;
        }
        
        public TrendType getTrendType() {
            return trendType;
        }
        
        public double getStrength() {
            return strength;
        }
        
        public double getVolatility() {
            return volatility;
        }
        
        public double getPriceChangePercent() {
            return priceChangePercent;
        }
        
        public double getVolumeChangePercent() {
            return volumeChangePercent;
        }
        
        public List<Map<String, Object>> getForecastData() {
            return forecastData;
        }
        
        public List<Double> getSupportLevels() {
            return supportLevels;
        }
        
        public List<Double> getResistanceLevels() {
            return resistanceLevels;
        }
    }
}