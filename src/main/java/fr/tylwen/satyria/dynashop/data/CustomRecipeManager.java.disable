package fr.tylwen.satyria.dynashop.data;

// import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.inventory.*;
import org.bukkit.configuration.ConfigurationSection;

import fr.tylwen.satyria.dynashop.DynaShopPlugin;
import net.brcdev.shopgui.ShopGuiPlusApi;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class CustomRecipeManager {
    private final DynaShopPlugin plugin;

    /**
     * Constructeur de CustomRecipeManager.
     *
     * @param plugin L'instance du plugin.
     */
    public CustomRecipeManager(DynaShopPlugin plugin) {
        this.plugin = plugin;
    }

    /**
     * Charge une recette à partir de la configuration du shop.
     *
     * @param shopID      L'ID du shop.
     * @param itemID      L'ID de l'item.
     * @param itemSection La section de configuration de l'item.
     * @return Une Optional contenant la recette si elle existe, sinon une Optional vide.
     */
    public Optional<Recipe> loadRecipeFromShopConfig(String shopID, String itemID, ConfigurationSection recipeSection) {
        // if (!itemSection.isConfigurationSection("recipe")) {
        //     return Optional.empty(); // Pas de recette définie
        // }

        // ConfigurationSection recipeSection = itemSection.getConfigurationSection("recipe");
        // String type = recipeSection.getString("type", "NONE").toUpperCase();
        if (recipeSection == null) {
            plugin.getLogger().warning("Section de recette null pour " + shopID + ":" + itemID);
            return Optional.empty();
        }

        // Vérifier le type de recette
        String type = recipeSection.getString("type", "NONE").toUpperCase();
        if (type.equals("NONE")) {
            plugin.getLogger().warning("Type de recette non défini pour " + shopID + ":" + itemID);
            return Optional.empty();
        }
        
        // Vérifications préalables selon le type
        if (type.equals("SHAPED") && !recipeSection.isList("pattern")) {
            plugin.getLogger().warning("Pas de pattern défini pour la recette SHAPED de " + shopID + ":" + itemID);
            return Optional.empty();
        }

        if (type.equals("SHAPELESS") && !recipeSection.isConfigurationSection("ingredients")) {
            plugin.getLogger().warning("Pas d'ingrédients définis pour la recette SHAPELESS de " + shopID + ":" + itemID);
            return Optional.empty();
        }

        if (type.equals("FURNACE") && !recipeSection.isConfigurationSection("input")) {
            plugin.getLogger().warning("Pas d'entrée définie pour la recette FURNACE de " + shopID + ":" + itemID);
            return Optional.empty();
        }

        try {
            switch (type) {
                case "SHAPED":
                    return Optional.of(loadShapedRecipe(shopID, itemID, recipeSection));
                case "SHAPELESS":
                    return Optional.of(loadShapelessRecipe(shopID, itemID, recipeSection));
                case "FURNACE":
                    return Optional.of(loadFurnaceRecipe(shopID, itemID, recipeSection));
                // case "BLAST_FURNACE":
                //     return Optional.of(loadFurnaceRecipe(itemID, recipeSection));
                // case "SMOKER":
                //     return Optional.of(loadFurnaceRecipe(itemID, recipeSection));
                // case "BREWING":
                //     return Optional.of(loadFurnaceRecipe(itemID, recipeSection));
                // case "STONECUTTER":
                //     return Optional.of(loadFurnaceRecipe(itemID, recipeSection));
                // case "NONE":
                //     return Optional.empty(); // Pas de recette
                default:
                    plugin.getLogger().warning("Type de recette inconnu pour l'item " + itemID + " dans le shop " + shopID);
                    return Optional.empty();
            }
        } catch (Exception e) {
            plugin.getLogger().warning("Erreur lors du chargement de la recette pour " + shopID + ":" + itemID + " - " + e.getMessage());
            return Optional.empty();
        }
    }

    // /**
    //  * Charge une recette à partir de la configuration du shop.
    //  *
    //  * @param itemID      L'ID de l'item.
    //  * @param recipeSection La section de configuration de la recette.
    //  * @return La recette chargée.
    //  */
    // private ShapedRecipe loadShapedRecipe(String itemID, ConfigurationSection recipeSection) {
    //     String[] pattern = recipeSection.getStringList("pattern").toArray(new String[0]);
    //     ConfigurationSection ingredientsSection = recipeSection.getConfigurationSection("ingredients");

    //     ShapedRecipe recipe = new ShapedRecipe(new NamespacedKey(plugin, itemID), new ItemStack(Material.matchMaterial(itemID)));
    //     recipe.shape(pattern);

    //     for (String key : ingredientsSection.getKeys(false)) {
    //         ConfigurationSection ingredient = ingredientsSection.getConfigurationSection(key);
    //         Material material = Material.matchMaterial(ingredient.getString("material"));
    //         if (material != null) {
    //             recipe.setIngredient(key.charAt(0), material);
    //         }
    //     }

    //     return recipe;
    // }

    // private ShapelessRecipe loadShapelessRecipe(String itemID, ConfigurationSection recipeSection) {
    //     ConfigurationSection ingredientsSection = recipeSection.getConfigurationSection("ingredients");

    //     ShapelessRecipe recipe = new ShapelessRecipe(new NamespacedKey(plugin, itemID), new ItemStack(Material.matchMaterial(itemID)));
    //     for (String key : ingredientsSection.getKeys(false)) {
    //         ConfigurationSection ingredient = ingredientsSection.getConfigurationSection(key);
    //         Material material = Material.matchMaterial(ingredient.getString("material"));
    //         int quantity = ingredient.getInt("quantity", 1);
    //         if (material != null) {
    //             for (int i = 0; i < quantity; i++) {
    //                 recipe.addIngredient(material);
    //             }
    //         }
    //     }

    //     return recipe;
    // }

    // /**
    //  * Charge une recette de four à partir de la configuration du shop.
    //  *
    //  * @param itemID      L'ID de l'item.
    //  * @param recipeSection La section de configuration de la recette.
    //  * @return La recette chargée.
    //  */
    // private FurnaceRecipe loadFurnaceRecipe(String itemID, ConfigurationSection recipeSection) {
    //     ConfigurationSection inputSection = recipeSection.getConfigurationSection("input");
    //     Material inputMaterial = Material.matchMaterial(inputSection.getString("material"));
    //     Material resultMaterial = Material.matchMaterial(itemID);

    //     return new FurnaceRecipe(
    //         new NamespacedKey(plugin, itemID),
    //         new ItemStack(resultMaterial),
    //         inputMaterial,
    //         0.1f, // XP
    //         200   // Temps de cuisson (ticks)
    //     );
    // }

    private ShapedRecipe loadShapedRecipe(String shopID, String itemID, ConfigurationSection recipeSection) {
        String[] pattern = recipeSection.getStringList("pattern").toArray(new String[0]);
        ConfigurationSection ingredientsSection = recipeSection.getConfigurationSection("ingredients");
        
        // Créer l'ItemStack du résultat
        ItemStack resultItem;
        try {
            resultItem = ShopGuiPlusApi.getShop(shopID).getShopItem(itemID).getItem().clone();
            resultItem.setAmount(1); // Assurer une seule unité
        } catch (Exception e) {
            // Fallback sur la méthode standard si l'item n'est pas trouvé dans le shop
            Material material = Material.matchMaterial(itemID);
            if (material == null) {
                plugin.getLogger().severe("Impossible de trouver le matériau pour " + itemID + " dans le shop " + shopID);
                throw new IllegalArgumentException("Material cannot be null");
            }
            resultItem = new ItemStack(material);
        }
        
        // Créer la recette
        ShapedRecipe recipe = new ShapedRecipe(new NamespacedKey(plugin, itemID), resultItem);
        recipe.shape(pattern);
        
        // Stocker les vrais ingrédients dans une map pour utilisation ultérieure
        Map<Character, ItemStack> realIngredients = new HashMap<>();
        
        if (ingredientsSection != null) {
            for (String key : ingredientsSection.getKeys(false)) {
                if (key.length() != 1) {
                    plugin.getLogger().warning("Clé d'ingrédient invalide: " + key);
                    continue;
                }
                
                try {
                    // Récupérer l'ingrédient complet avec métadonnées
                    ItemStack ingredient = getIngredientFromConfig(ingredientsSection.getConfigurationSection(key));
                    if (ingredient != null) {
                        // Stocker l'ingrédient réel pour référence future
                        realIngredients.put(key.charAt(0), ingredient);
                        
                        // Pour la recette Bukkit, on utilise juste le matériau de base
                        recipe.setIngredient(key.charAt(0), ingredient.getType());
                        
                        // Logger l'ingrédient pour débogage
                        plugin.getLogger().info("Ingrédient pour " + key + ": " + ingredient.getType() + 
                                            (ingredient.hasItemMeta() ? " avec métadonnées" : " sans métadonnées"));
                    }
                } catch (Exception e) {
                    plugin.getLogger().warning("Erreur lors du chargement de l'ingrédient " + key + ": " + e.getMessage());
                }
            }
        }
        
        // Stocker les vrais ingrédients dans un espace de stockage accessible pour vérification ultérieure
        plugin.getCustomIngredientsManager().storeRecipeIngredients(shopID, itemID, realIngredients, pattern);
        
        return recipe;
    }

    private ShapelessRecipe loadShapelessRecipe(String shopID, String itemID, ConfigurationSection recipeSection) {
        ConfigurationSection ingredientsSection = recipeSection.getConfigurationSection("ingredients");
        
        // Créer l'ItemStack du résultat
        // ItemStack resultItem = new ItemStack(Material.matchMaterial(itemID));
        ItemStack resultItem;

        try {
            resultItem = ShopGuiPlusApi.getShop(shopID).getShopItem(itemID).getItem().clone();
            resultItem.setAmount(1); // Assurer une seule unité
        } catch (Exception e) {
            // Fallback sur la méthode standard si l'item n'est pas trouvé dans le shop
            Material material = Material.matchMaterial(itemID);
            if (material == null) {
                plugin.getLogger().severe("Impossible de trouver le matériau pour " + itemID + " dans le shop " + shopID);
                throw new IllegalArgumentException("Material cannot be null");
            }
            resultItem = new ItemStack(material);
        }
        
        // Créer la recette
        ShapelessRecipe recipe = new ShapelessRecipe(new NamespacedKey(plugin, itemID), resultItem);
        
        if (ingredientsSection != null) {
            for (String key : ingredientsSection.getKeys(false)) {
                try {
                    ItemStack ingredient = getIngredientFromConfig(ingredientsSection.getConfigurationSection(key));
                    if (ingredient != null) {
                        int quantity = ingredientsSection.getConfigurationSection(key).getInt("quantity", 1);
                        for (int i = 0; i < quantity; i++) {
                            recipe.addIngredient(ingredient.getType());
                        }
                    }
                } catch (Exception e) {
                    plugin.getLogger().warning("Erreur lors du chargement de l'ingrédient " + key + ": " + e.getMessage());
                }
            }
        }
        
        return recipe;
    }

    private FurnaceRecipe loadFurnaceRecipe(String shopID, String itemID, ConfigurationSection recipeSection) {
        ConfigurationSection inputSection = recipeSection.getConfigurationSection("input");
        
        // Créer l'ItemStack du résultat
        // ItemStack resultItem = new ItemStack(Material.matchMaterial(itemID));
        ItemStack resultItem;

        try {
            resultItem = ShopGuiPlusApi.getShop(shopID).getShopItem(itemID).getItem().clone();
            resultItem.setAmount(1); // Assurer une seule unité
        } catch (Exception e) {
            // Fallback sur la méthode standard si l'item n'est pas trouvé dans le shop
            Material material = Material.matchMaterial(itemID);
            if (material == null) {
                plugin.getLogger().severe("Impossible de trouver le matériau pour " + itemID + " dans le shop " + shopID);
                throw new IllegalArgumentException("Material cannot be null");
            }
            resultItem = new ItemStack(material);
        }
        
        // Obtenir l'ingrédient d'entrée
        ItemStack inputItem = getIngredientFromConfig(inputSection);
        if (inputItem == null) {
            // Fallback sur la méthode simple
            Material inputMaterial = Material.matchMaterial(inputSection.getString("material", "STONE"));
            inputItem = new ItemStack(inputMaterial);
        }
        
        float experience = (float) recipeSection.getDouble("experience", 0.1);
        int cookingTime = recipeSection.getInt("cookingTime", 200);
        
        return new FurnaceRecipe(
            new NamespacedKey(plugin, itemID),
            resultItem,
            inputItem.getType(),
            experience,
            cookingTime
        );
    }

    /**
     * Méthode utilitaire pour extraire un ingrédient depuis la configuration
     * Prend en charge plusieurs formats:
     * - format simple: "material: IRON_INGOT"
     * - format cross-shop: "item: shopID:itemID" 
     */
    private ItemStack getIngredientFromConfig(ConfigurationSection section) {
        if (section == null) {
            return null;
        }
        
        // Vérifier s'il y a une référence à un item d'un shop
        if (section.contains("item")) {
            String itemRef = section.getString("item");
            if (itemRef != null && itemRef.contains(":")) {
                String[] parts = itemRef.split(":");
                if (parts.length == 2) {
                    String shopID = parts[0];
                    String itemID = parts[1];
                    
                    try {
                        // Essayer d'obtenir l'item depuis le shop
                        // ItemStack shopItem = net.brcdev.shopgui.ShopGuiPlusApi.getItemStackInShop(shopID, itemID);
                        ItemStack shopItem = ShopGuiPlusApi.getShop(shopID).getShopItem(itemID).getItem();
                        if (shopItem != null) {
                            ItemStack result = shopItem.clone();
                            result.setAmount(section.getInt("quantity", 1));
                            return result;
                        }
                    } catch (Exception e) {
                        plugin.getLogger().warning("Erreur lors de la récupération de l'item " + itemRef + ": " + e.getMessage());
                    }
                }
            }
        }
        
        // Fallback sur le format simple
        Material material = Material.matchMaterial(section.getString("material", "AIR"));
        if (material != null && material != Material.AIR) {
            return new ItemStack(material, section.getInt("quantity", 1));
        }
        
        return null;
    }



    // Exemples pour différents types de recettes
    // Pour les blocs (9-1 comme l'IRON_BLOCK)
    // recipe:
    //     type: SHAPED
    //     pattern:
    //         - "XXX"
    //         - "XXX"
    //         - "XXX"
    //     ingredients:
    //         X:
    //         item: minerais:IRON_INGOT
    //         quantity: 1

    // Pour les lingots (à partir de pépites, 9-1)
    // recipe:
    //     type: SHAPED
    //     pattern:
    //         - "XXX"
    //         - "XXX"
    //         - "XXX"
    //     ingredients:
    //         X:
    //         item: minerais:IRON_NUGGET
    //         quantity: 1

    // Pour les recettes de cuisson
    // recipe:
    //     type: FURNACE
    //     input:
    //         item: minerais:IRON_ORE
    //         quantity: 1

}