/*
 * ShopGUI+ DynaShop - Dynamic Economy Addon for Minecraft
 * Copyright (C) 2025 Tylwen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
package fr.tylwen.satyria.dynashop.database;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
// import java.util.concurrent.ExecutionException;

import org.bukkit.Bukkit;

import fr.tylwen.satyria.dynashop.DynaShopPlugin;
import fr.tylwen.satyria.dynashop.config.DataConfig;
import fr.tylwen.satyria.dynashop.data.param.DynaShopType;
import fr.tylwen.satyria.dynashop.data.storage.StorageManager;
import fr.tylwen.satyria.dynashop.price.DynamicPrice;
import net.brcdev.shopgui.shop.item.ShopItem;

/**
 * Gère l'accès aux données des items dans la base de données.
 * Utilise les méthodes sécurisées du DataManager optimisé.
 */
public class ItemDataManager {
    private final StorageManager dataManager;
    private final DataConfig dataConfig;
    private final DynaShopPlugin plugin;

    // Cache pour les résultats d'existence d'items (shopID:itemID -> exists)
    private final Map<String, Boolean> existenceCache = new ConcurrentHashMap<>();
    private final Map<String, Boolean> priceExistsCache = new ConcurrentHashMap<>();

    public ItemDataManager(StorageManager dataManager) {
        this.dataManager = dataManager;
        this.plugin = DynaShopPlugin.getInstance();
        this.dataConfig = new DataConfig(plugin.getConfigMain());
    }

    /**
     * Récupère toutes les valeurs d'un item
     */
    public Optional<DynamicPrice> getItemValues(String shopID, String itemID) {
        // Déléguer directement à dataManager.getPrices qui contient déjà cette logique
        return dataManager.getPrices(shopID, itemID);
    }

    /**
     * Méthode générique pour récupérer un prix (achat ou vente) depuis la base de données.
     */
    public Optional<Double> getPrice(String shopID, String itemID, String column) {
        // Déléguer directement à dataManager.getPrice
        return dataManager.getPrice(shopID, itemID, column);
    }

    /**
     * Récupère le prix d'achat d'un item.
     */
    public Optional<Double> getBuyPrice(String shopID, String itemID) {
        return dataManager.getBuyPrice(shopID, itemID);
    }

    /**
     * Récupère le prix de vente d'un item.
     */
    public Optional<Double> getSellPrice(String shopID, String itemID) {
        return dataManager.getSellPrice(shopID, itemID);
    }

    /**
     * Récupère le prix d'achat et de vente d'un item.
     */
    public Optional<DynamicPrice> getPrices(String shopID, String itemID) {
        return dataManager.getPrices(shopID, itemID);
    }

    // public void createItem(String shopID, String itemID) {
    //     // Crée un nouvel item avec des prix par défaut
    //     dataManager.createItem(shopID, itemID);
    // }

    /**
     * Sauvegarde ou met à jour les prix d'un item.
     */
    // public void savePrice(String shopID, String itemID, double buyPrice, double sellPrice) {
    //     dataManager.savePrice(shopID, itemID, buyPrice, sellPrice);
    // }
    
    // /**
    //  * Sauvegarde ou met à jour les prix et le stock d'un item.
    //  */
    // public void savePrice(String shopID, String itemID, double buyPrice, double sellPrice, int stock) {
    //     dataManager.savePrice(shopID, itemID, buyPrice, sellPrice, stock);
    // }

    // /**
    //  * Sauvegarde plusieurs prix de manière optimisée.
    //  */
    // public void savePrices(Map<ShopItem, DynamicPrice> priceMap) {
    //     // Utiliser le mode asynchrone pour les opérations groupées
    //     dataManager.executeAsync(() -> {
    //         String tablePrefix = dataConfig.getDatabaseTablePrefix();
    //         String query = "REPLACE INTO " + tablePrefix + "_prices (shopID, itemID, buyPrice, sellPrice, stock) VALUES (?, ?, ?, ?, ?)";
            
    //         try (Connection connection = dataManager.getConnection();
    //              PreparedStatement stmt = connection.prepareStatement(query)) {
                
    //             for (Map.Entry<ShopItem, DynamicPrice> entry : priceMap.entrySet()) {
    //                 ShopItem item = entry.getKey();
    //                 DynamicPrice price = entry.getValue();
                    
    //                 stmt.setString(1, item.getShop().getId());
    //                 stmt.setString(2, item.getId());
    //                 stmt.setDouble(3, price.getBuyPrice());
    //                 stmt.setDouble(4, price.getSellPrice());
    //                 stmt.setInt(5, price.getStock());
    //                 stmt.addBatch();
    //             }
                
    //             int[] results = stmt.executeBatch();
    //             return results.length; // Retourne le nombre d'enregistrements traités
    //         }
    //     });
    // }

    /**
     * Sauvegarde un DynamicPrice pour un ShopItem.
     */
    public void saveDynamicPrice(ShopItem item, DynamicPrice price) {
        dataManager.savePrice(item.getShop().getId(), item.getId(), price.getBuyPrice(), price.getSellPrice(), price.getStock());
    }
    
    /**
     * Version asynchrone de saveDynamicPrice.
     */
    public CompletableFuture<Void> saveDynamicPriceAsync(ShopItem item, DynamicPrice price) {
        return dataManager.executeAsync(() -> {
            saveDynamicPrice(item, price);
            return null;
        });
    }

    /**
     * Charge un DynamicPrice depuis la base de données.
     */
    public DynamicPrice loadDynamicPrice(String shopID, String itemID) {
        Optional<DynamicPrice> priceData = getPrices(shopID, itemID);
        if (priceData.isPresent()) {
            DynamicPrice price = priceData.get();
            price.adjustPricesBasedOnStock();
            return price;
        }
        return null;
    }
    
    /**
     * Version asynchrone de loadDynamicPrice.
     */
    public CompletableFuture<DynamicPrice> loadDynamicPriceAsync(String shopID, String itemID) {
        return dataManager.executeAsync(() -> loadDynamicPrice(shopID, itemID));
    }

    /**
     * Récupère le stock d'un item.
     */
    public Optional<Integer> getStock(String shopID, String itemID) {
        return dataManager.getStock(shopID, itemID);
    }

    /**
     * Récupère le stock d'un ShopItem.
     */
    public Optional<Integer> getStock(ShopItem item) {
        return getStock(item.getShop().getId(), item.getId());
    }

    /**
     * Met à jour le stock d'un item en tenant compte du type DynaShop.
     * Stocke -1 si l'item n'est pas en mode STOCK ou STATIC_STOCK.
     */
    public void insertStock(String shopID, String itemID, int stock) {
        // Vérifier le type de l'item
        DynaShopType typeDynaShop = plugin.getShopConfigManager().getTypeDynaShop(shopID, itemID);
        
        // // Si l'item n'est pas en mode STOCK ou STATIC_STOCK, utiliser -1
        // if (type != DynaShopType.STOCK && type != DynaShopType.STATIC_STOCK) {
        //     dataManager.insertStock(shopID, itemID, -1);
        // } else {
        //     // dataManager.insertStock(shopID, itemID, stock);
        //     // Pour les autres types, supprimer l'entrée si elle existe
        //     dataManager.deleteStock(shopID, itemID);
        // }
        // N'insérer que les items en mode STOCK ou STATIC_STOCK
        if (typeDynaShop == DynaShopType.STOCK || typeDynaShop == DynaShopType.STATIC_STOCK) {
            dataManager.saveStock(shopID, itemID, stock);
        } else {
            // Pour les autres types, supprimer l'entrée si elle existe
            dataManager.deleteStock(shopID, itemID);
        }
    }

    /**
     * Met à jour le stock d'un ShopItem.
     */
    public void insertStock(ShopItem item, int stock) {
        insertStock(item.getShop().getId(), item.getId(), stock);
    }
    
    /**
     * Version asynchrone de insertStock.
     */
    public CompletableFuture<Void> insertStockAsync(String shopID, String itemID, int stock) {
        return dataManager.executeAsync(() -> {
            insertStock(shopID, itemID, stock);
            return null;
        });
    }

    /**
     * Supprime un item de la base de données.
     */
    // public void deleteItem(String shopID, String itemID) {
    //     String query = "DELETE FROM " + dataConfig.getDatabaseTablePrefix() + "_items WHERE shopID = ? AND itemID = ?";
    //     dataManager.executeAsync(() -> {
    //         try (Connection connection = dataManager.getConnection();
    //              PreparedStatement stmt = connection.prepareStatement(query)) {
    //             stmt.setString(1, shopID);
    //             stmt.setString(2, itemID);
    //             return stmt.executeUpdate();
    //         }
    //     });
    // }
    public void deleteItem(String shopID, String itemID) {
        dataManager.deleteItem(shopID, itemID);
    }

    // /**
    //  * Supprime tous les items d'un shop de la base de données.
    //  */
    // public void deleteShopItems(String shopID) {
    //     String query = "DELETE FROM " + dataConfig.getDatabaseTablePrefix() + "_prices WHERE shopID = ?";
    //     dataManager.executeAsync(() -> {
    //         try (Connection connection = dataManager.getConnection();
    //              PreparedStatement stmt = connection.prepareStatement(query)) {
    //             stmt.setString(1, shopID);
    //             return stmt.executeUpdate();
    //         }
    //     });
    // }

    // /**
    //  * Supprime tous les items de la base de données.
    //  */
    // public void deleteAllItems() {
    //     String query = "DELETE FROM " + dataConfig.getDatabaseTablePrefix() + "_prices";
    //     dataManager.executeAsync(() -> {
    //         try (Connection connection = dataManager.getConnection();
    //              PreparedStatement stmt = connection.prepareStatement(query)) {
    //             return stmt.executeUpdate();
    //         }
    //     });
    // }

    /**
     * Vérifie si un item existe dans la base de données.
     * Version non-bloquante qui utilise une valeur en cache si disponible.
     */
    public boolean itemExists(String shopID, String itemID) {
        // Si nous sommes dans le thread principal, utiliser une version rapide
        if (Bukkit.isPrimaryThread()) {
            // Utiliser le cache si disponible, sinon supposer que l'item existe
            // et laisser la vérification réelle se faire en arrière-plan
            Boolean cachedExists = existenceCache.get(shopID + ":" + itemID);
            if (cachedExists != null) {
                return cachedExists;
            }
            
            // Lancer la vérification en arrière-plan pour mettre à jour le cache
            dataManager.executeAsync(() -> {
                boolean exists = checkItemExistsInDatabase(shopID, itemID);
                existenceCache.put(shopID + ":" + itemID, exists);
                return null;
            });
            
            // Par défaut, supposer que l'item existe pour éviter de bloquer
            return true;
        }
        
        // Version pour thread non-principal (peut bloquer sans problème)
        try {
            return dataManager.executeAsync(() -> checkItemExistsInDatabase(shopID, itemID)).get();
        } catch (Exception e) {
            plugin.getLogger().severe("Error checking for item existence: " + e.getMessage());
            return false;
        }
    }

    /**
     * Méthode interne pour vérifier l'existence d'un item dans la base de données.
     */
    private boolean checkItemExistsInDatabase(String shopID, String itemID) {
        String query = "SELECT COUNT(*) FROM " + dataConfig.getDatabaseTablePrefix() + "_items WHERE shopID = ? AND itemID = ?";
        try (Connection connection = dataManager.getConnection();
            PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, shopID);
            stmt.setString(2, itemID);
            ResultSet resultSet = stmt.executeQuery();
            return resultSet.next() && resultSet.getInt(1) > 0;
        } catch (SQLException e) {
            plugin.getLogger().severe("SQL error while checking for the existence of an item: " + e.getMessage());
            return false;
        }
    }

    /**
     * Vérifie si un item a un prix.
     * Version non-bloquante qui utilise une valeur en cache si disponible.
     */
    public boolean itemHasPrice(String shopID, String itemID) {
        // Si nous sommes dans le thread principal, utiliser une version rapide
        if (Bukkit.isPrimaryThread()) {
            String cacheKey = shopID + ":" + itemID + ":price";
            
            // Utiliser le cache si disponible
            Boolean cachedHasPrice = priceExistsCache.get(cacheKey);
            if (cachedHasPrice != null) {
                return cachedHasPrice;
            }
            
            // Lancer la vérification en arrière-plan pour mettre à jour le cache
            dataManager.executeAsync(() -> {
                boolean hasPrice = checkItemHasPriceInDatabase(shopID, itemID);
                priceExistsCache.put(cacheKey, hasPrice);
                return null;
            });
            
            // Par défaut, supposer que l'item a un prix pour éviter de bloquer
            return true;
        }
        
        // Version pour thread non-principal (peut bloquer sans problème)
        try {
            return dataManager.executeAsync(() -> checkItemHasPriceInDatabase(shopID, itemID)).get();
        } catch (Exception e) {
            plugin.getLogger().severe("Error checking item prices: " + e.getMessage());
            return false;
        }
    }

    /**
     * Méthode interne pour vérifier si un item a un prix dans la base de données.
     */
    private boolean checkItemHasPriceInDatabase(String shopID, String itemID) {
        String query = "SELECT COUNT(*) FROM " + dataConfig.getDatabaseTablePrefix() + "_items WHERE shopID = ? AND itemID = ? AND (buyPrice > 0 OR sellPrice > 0)";
        try (Connection connection = dataManager.getConnection();
            PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, shopID);
            stmt.setString(2, itemID);
            ResultSet resultSet = stmt.executeQuery();
            return resultSet.next() && resultSet.getInt(1) > 0;
        } catch (SQLException e) {
            plugin.getLogger().severe("SQL error while checking item prices: " + e.getMessage());
            return false;
        }
    }

    /**
     * Alias de itemExists pour la rétrocompatibilité.
     */
    public boolean priceExists(String shopID, String itemID) {
        return itemExists(shopID, itemID);
    }

    // /**
    //  * Récupère toutes les valeurs de prix pour un item en une seule opération.
    //  * Fournit un accès optimisé aux données sans appels répétés à la DB.
    //  */
    // public Optional<DynamicPrice> getItemValues(String shopID, String itemID) {
    //     // Si nous sommes dans le thread principal, utiliser une version asynchrone non-bloquante
    //     if (Bukkit.isPrimaryThread()) {
    //         // Vérifier le cache d'abord
    //         String cacheKey = shopID + ":" + itemID + ":dynprice";
    //         DynamicPrice cachedPrice = itemValuesCache.get(cacheKey);
    //         if (cachedPrice != null) {
    //             return Optional.of(cachedPrice);
    //         }
            
    //         // Lancer la récupération en arrière-plan pour mettre à jour le cache
    //         dataManager.executeAsync(() -> {
    //             Optional<DynamicPrice> price = fetchItemValuesFromDB(shopID, itemID);
    //             price.ifPresent(p -> itemValuesCache.put(cacheKey, p));
    //             return null;
    //         });
            
    //         // Retourner une valeur vide si pas en cache
    //         return Optional.empty();
    //     }
        
    //     // Version pour thread non-principal
    //     try {
    //         return dataManager.executeAsync(() -> fetchItemValuesFromDB(shopID, itemID)).get();
    //     } catch (InterruptedException e) {
    //         // CORRECTION : Réinterrompre le thread pour préserver le signal d'interruption
    //         Thread.currentThread().interrupt();
    //         plugin.getLogger().warning("Thread interrompu pendant la récupération des prix: " + e.getMessage());
    //         return Optional.empty();
    //     } catch (ExecutionException e) {
    //         plugin.getLogger().severe("Erreur lors de la récupération des valeurs d'item: " + e.getMessage());
    //         return Optional.empty();
    //     }
    // }

    // /**
    //  * Récupère un prix spécifique pour un item.
    //  */
    // public Optional<Double> getBuyPrice(String shopID, String itemID) {
    //     try {
    //         return dataManager.getBuyPrice(shopID, itemID);
    //     } catch (RuntimeException e) {
    //         if (e.getCause() instanceof InterruptedException) {
    //             // CORRECTION : Réinterrompre le thread
    //             Thread.currentThread().interrupt();
    //         }
    //         plugin.getLogger().warning("Erreur lors de la récupération du prix d'achat: " + e.getMessage());
    //         return Optional.empty();
    //     }
    // }
}