package fr.tylwen.satyria.dynashop.data;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.NamespacedKey;
import org.bukkit.attribute.AttributeModifier;
// import org.bukkit.block.BlastFurnace;
import org.bukkit.configuration.ConfigurationSection;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.enchantments.Enchantment;
// import org.bukkit.inventory.BlastingRecipe;
import org.bukkit.inventory.FurnaceRecipe;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.Recipe;
import org.bukkit.inventory.ShapedRecipe;
import org.bukkit.inventory.ShapelessRecipe;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.Plugin;
// import org.bukkit.inventory.SmokingRecipe;
// import org.bukkit.inventory.StonecuttingRecipe;
// import org.bukkit.inventory.CampfireRecipe;
// import org.bukkit.inventory.BrewerInventory;
import org.bukkit.util.Consumer;

import de.tr7zw.changeme.nbtapi.NBT;
import de.tr7zw.changeme.nbtapi.NBTItem;
import de.tr7zw.changeme.nbtapi.iface.ReadWriteNBT;
import fr.tylwen.satyria.dynashop.DynaShopPlugin;
import fr.tylwen.satyria.dynashop.data.PriceRecipe.FoundItem;
import fr.tylwen.satyria.dynashop.data.param.DynaShopType;
import fr.tylwen.satyria.dynashop.data.param.RecipeType;
import net.brcdev.shopgui.ShopGuiPlusApi;
import net.brcdev.shopgui.shop.Shop;
import net.brcdev.shopgui.shop.item.ShopItem;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashMap;
// import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.function.Supplier;
import java.util.stream.Collectors;

public class PriceRecipe {
    private final FileConfiguration config;
    
    // Ajouter ces champs à la classe PriceRecipe
    private final Map<String, List<ItemStack>> ingredientsCache = new HashMap<>();
    private final long CACHE_DURATION = 20L * 60L * 5L; // 5 minutes
    // private final long CACHE_DURATION = 20L; // 1 seconde
    private final Map<String, Long> cacheTimestamps = new HashMap<>();

    private final ExecutorService highPriorityExecutor;
    private final Map<String, Integer> itemAccessCounter = new ConcurrentHashMap<>();
    private final List<String> popularItems = new ArrayList<>();
    private static final int POPULAR_THRESHOLD = 10;
    
    // Limiter la profondeur de récursion pour éviter les boucles infinies
    // private static final int MAX_RECURSION_DEPTH = 5;
    // Pool de threads limité pour les calculs asynchrones
    private final ExecutorService recipeExecutor;

    public PriceRecipe(FileConfiguration config) {
        this.config = config;
        
        // Créer un pool de threads dédié et limité pour les calculs de recettes
        this.recipeExecutor = Executors.newFixedThreadPool(2, r -> {
            Thread thread = new Thread(r, "Recipe-Calculator");
            thread.setDaemon(true);
            return thread;
        });
        
        // Créer un pool de threads prioritaire pour les items populaires
        this.highPriorityExecutor = Executors.newFixedThreadPool(1, r -> {
            Thread thread = new Thread(r, "High-Priority-Calculator");
            thread.setDaemon(true);
            thread.setPriority(Thread.MAX_PRIORITY);
            return thread;
        });
        
        // Charger les items populaires depuis la configuration
        this.loadPopularItems();
    }

    /**
     * Classe représentant le résultat complet d'un calcul de recette
     */
    public class RecipeCalculationResult {
        private double buyPrice;
        private double sellPrice;
        private double minBuyPrice;
        private double maxBuyPrice;
        private double minSellPrice;
        private double maxSellPrice;
        private int stock;
        private int minStock;
        private int maxStock;
        
        // Constructeur, getters et setters...
        
        public RecipeCalculationResult(double buyPrice, double sellPrice, 
                                    double minBuyPrice, double maxBuyPrice,
                                    double minSellPrice, double maxSellPrice,
                                    int stock, int minStock, int maxStock) {
            this.buyPrice = buyPrice;
            this.sellPrice = sellPrice;
            this.minBuyPrice = minBuyPrice;
            this.maxBuyPrice = maxBuyPrice;
            this.minSellPrice = minSellPrice;
            this.maxSellPrice = maxSellPrice;
            this.stock = stock;
            this.minStock = minStock;
            this.maxStock = maxStock;
        }
        
        // Getters...
        public double getBuyPrice() { return buyPrice; }
        public double getSellPrice() { return sellPrice; }
        public double getMinBuyPrice() { return minBuyPrice; }
        public double getMaxBuyPrice() { return maxBuyPrice; }
        public double getMinSellPrice() { return minSellPrice; }
        public double getMaxSellPrice() { return maxSellPrice; }
        public int getStock() { return stock; }
        public int getMinStock() { return minStock; }
        public int getMaxStock() { return maxStock; }
    }

    // /**
    //  * Calcule toutes les valeurs importantes pour une recette en une seule passe
    //  * Cette méthode remplace les multiples appels séparés à calculatePrice, calculateStock, etc.
    //  */
    // // public RecipeCalculationResult calculateRecipeValues(String shopID, String itemID, ItemStack item) {
    // public RecipeCalculationResult calculateRecipeValues(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
    //     // List<String> visitedItems = new ArrayList<>();
        
    //     // Récupérer tous les ingrédients une seule fois
    //     List<ItemStack> ingredients = getIngredients(shopID, itemID, item);
    //     ingredients = consolidateIngredients(ingredients);
        
    //     // Variables pour le calcul
    //     double basePrice = 0.0;
    //     double baseSellPrice = 0.0;
    //     double baseMinBuyPrice = 0.0;
    //     double baseMaxBuyPrice = 0.0;
    //     double baseMinSellPrice = 0.0;
    //     double baseMaxSellPrice = 0.0;
    //     int minAvailableStock = Integer.MAX_VALUE;
    //     int totalMinStock = 0;
    //     int totalMaxStock = 0;
        
    //     // Parcourir les ingrédients une seule fois
    //     for (ItemStack ingredient : ingredients) {
    //         if (ingredient == null || ingredient.getType() == Material.AIR) {
    //             continue;
    //         }
            
    //         // Récupérer toutes les données de l'ingrédient en une fois
    //         String ingredientID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
    //         String ingredientShopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();
            
    //         // Éviter les boucles infinies
    //         if (visitedItems.contains(ingredientID)) {
    //             continue;
    //         }
    //         visitedItems.add(ingredientID);
            
    //         // Obtenir le type de l'ingrédient
    //         DynaShopType ingredientType = getIngredientType(ingredient);
            
    //         // Selon le type de l'ingrédient, obtenir les valeurs
    //         double ingredientBuyPrice = 0.0;
    //         double ingredientSellPrice = 0.0;
    //         double ingredientMinBuyPrice = 0.0;
    //         double ingredientMaxBuyPrice = 0.0;
    //         double ingredientMinSellPrice = 0.0;
    //         double ingredientMaxSellPrice = 0.0;
    //         int ingredientStock = 0;
    //         int ingredientMinStock = 0;
    //         int ingredientMaxStock = 0;
            
    //         if (ingredientType == DynaShopType.STOCK) {
    //             // Pour les ingrédients en mode STOCK
    //             ingredientBuyPrice = DynaShopPlugin.getInstance().getPriceStock().calculatePrice(ingredientShopID, ingredientID, "buyPrice");
    //             ingredientSellPrice = DynaShopPlugin.getInstance().getPriceStock().calculatePrice(ingredientShopID, ingredientID, "sellPrice");
                
    //             // Récupérer les bornes depuis la configuration
    //             ingredientMinBuyPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "buyDynamic.min", Double.class)
    //                 .orElse(ingredientBuyPrice * 0.5);
                    
    //             ingredientMaxBuyPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "buyDynamic.max", Double.class)
    //                 .orElse(ingredientBuyPrice * 2.0);
                    
    //             ingredientMinSellPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "sellDynamic.min", Double.class)
    //                 .orElse(ingredientSellPrice * 0.5);
                    
    //             ingredientMaxSellPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "sellDynamic.max", Double.class)
    //                 .orElse(ingredientSellPrice * 2.0);
                
    //             // Récupérer le stock actuel et maximum
    //             ingredientStock = DynaShopPlugin.getInstance().getItemDataManager().getStock(ingredientShopID, ingredientID).orElse(0);
    //             ingredientMinStock = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "stock.min", Integer.class).orElse(0);
    //             ingredientMaxStock = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "stock.max", Integer.class).orElse(0);
    //         } else if (ingredientType == DynaShopType.RECIPE) {
    //             // Pour les ingrédients eux-mêmes basés sur des recettes, calculer récursivement
    //             ItemStack ingredientItemStack = ShopGuiPlusApi.getShop(ingredientShopID).getShopItem(ingredientID).getItem();
    //             if (ingredientItemStack != null) {
    //                 List<String> newVisitedItems = new ArrayList<>(visitedItems);
    //                 // RecipeCalculationResult ingredientResult = calculateRecipeValues(ingredientShopID, ingredientID, ingredientItemStack);
    //                 RecipeCalculationResult ingredientResult = calculateRecipeValues(ingredientShopID, ingredientID, ingredientItemStack, newVisitedItems);
                    
    //                 ingredientBuyPrice = ingredientResult.getBuyPrice();
    //                 ingredientSellPrice = ingredientResult.getSellPrice();
    //                 ingredientMinBuyPrice = ingredientResult.getMinBuyPrice();
    //                 ingredientMaxBuyPrice = ingredientResult.getMaxBuyPrice();
    //                 ingredientMinSellPrice = ingredientResult.getMinSellPrice();
    //                 ingredientMaxSellPrice = ingredientResult.getMaxSellPrice();
    //                 ingredientStock = ingredientResult.getStock();
    //                 ingredientMinStock = ingredientResult.getMinStock();
    //                 ingredientMaxStock = ingredientResult.getMaxStock();
    //             }
    //         } else {
    //             // Pour les autres types d'ingrédients (DYNAMIC, etc.)
    //             ingredientBuyPrice = DynaShopPlugin.getInstance().getItemDataManager()
    //                 .getBuyPrice(ingredientShopID, ingredientID)
    //                 .orElse(DynaShopPlugin.getInstance().getShopConfigManager()
    //                     .getItemValue(ingredientShopID, ingredientID, "buyPrice", Double.class)
    //                     .orElse(10.0));
                        
    //             ingredientSellPrice = DynaShopPlugin.getInstance().getItemDataManager()
    //                 .getSellPrice(ingredientShopID, ingredientID)
    //                 .orElse(DynaShopPlugin.getInstance().getShopConfigManager()
    //                     .getItemValue(ingredientShopID, ingredientID, "sellPrice", Double.class)
    //                     .orElse(8.0));
                        
    //             // Récupérer les bornes depuis la configuration
    //             ingredientMinBuyPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "buyDynamic.min", Double.class)
    //                 .orElse(ingredientBuyPrice * 0.5);
                    
    //             ingredientMaxBuyPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "buyDynamic.max", Double.class)
    //                 .orElse(ingredientBuyPrice * 2.0);
                    
    //             ingredientMinSellPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "sellDynamic.min", Double.class)
    //                 .orElse(ingredientSellPrice * 0.5);
                    
    //             ingredientMaxSellPrice = DynaShopPlugin.getInstance().getShopConfigManager()
    //                 .getItemValue(ingredientShopID, ingredientID, "sellDynamic.max", Double.class)
    //                 .orElse(ingredientSellPrice * 2.0);
    //         }
            
    //         // Calculer la contribution de cet ingrédient aux différentes valeurs
    //         int amount = ingredient.getAmount();
    //         basePrice += ingredientBuyPrice * amount;
    //         baseSellPrice += ingredientSellPrice * amount;
    //         baseMinBuyPrice += ingredientMinBuyPrice * amount;
    //         baseMaxBuyPrice += ingredientMaxBuyPrice * amount;
    //         baseMinSellPrice += ingredientMinSellPrice * amount;
    //         baseMaxSellPrice += ingredientMaxSellPrice * amount;
            
    //         // Calcul du stock disponible pour cet ingrédient
    //         int availableForCrafting = ingredientStock / amount;
    //         minAvailableStock = Math.min(minAvailableStock, availableForCrafting);

    //         // Stock minimum
    //         int minAvailableForCrafting = ingredientMinStock / amount;
    //         totalMinStock += minAvailableForCrafting;

    //         // Stock maximum
    //         int maxAvailableForCrafting = ingredientMaxStock / amount;
    //         totalMaxStock += maxAvailableForCrafting;
            
    //         // Optimisation: sortir tôt si on trouve un stock zéro
    //         if (minAvailableStock == 0) break;
    //     }
        
    //     // Appliquer le modificateur de recette
    //     double modifier = getRecipeModifier(item);
    //     double finalBuyPrice = basePrice * modifier;
    //     double finalSellPrice = baseSellPrice * modifier;
    //     double finalMinBuyPrice = baseMinBuyPrice * modifier;
    //     double finalMaxBuyPrice = baseMaxBuyPrice * modifier;
    //     double finalMinSellPrice = baseMinSellPrice * modifier;
    //     double finalMaxSellPrice = baseMaxSellPrice * modifier;
        
    //     // Vérifier que le prix de vente n'est pas supérieur au prix d'achat
    //     if (finalSellPrice > finalBuyPrice - DynamicPrice.MIN_MARGIN) {
    //         finalSellPrice = finalBuyPrice - DynamicPrice.MIN_MARGIN;
    //     }
        
    //     // Vérifier que les bornes sont respectées
    //     finalBuyPrice = Math.max(finalMinBuyPrice, Math.min(finalBuyPrice, finalMaxBuyPrice));
    //     finalSellPrice = Math.max(finalMinSellPrice, Math.min(finalSellPrice, finalMaxSellPrice));
        
    //     // Ajuster le stock maximum et actuel
    //     int finalStock = (minAvailableStock == Integer.MAX_VALUE) ? 0 : minAvailableStock;
        
    //     // Mettre en cache tous les résultats
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyPrice", finalBuyPrice);
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellPrice", finalSellPrice);
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyDynamic.min", finalMinBuyPrice);
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyDynamic.max", finalMaxBuyPrice);
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellDynamic.min", finalMinSellPrice);
    //     DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellDynamic.max", finalMaxSellPrice);
    //     DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "stock", finalStock);
    //     DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "minstock", totalMinStock);
    //     DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "maxstock", totalMaxStock);
        
    //     return new RecipeCalculationResult(
    //         finalBuyPrice, finalSellPrice,
    //         finalMinBuyPrice, finalMaxBuyPrice,
    //         finalMinSellPrice, finalMaxSellPrice,
    //         finalStock, totalMinStock, totalMaxStock
    //     );
    // }
    public RecipeCalculationResult calculateRecipeValues(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
        // Récupérer tous les ingrédients une seule fois
        List<ItemStack> ingredients = getIngredients(shopID, itemID, item);
        ingredients = consolidateIngredients(ingredients);
        
        // Variables pour le calcul
        double basePrice = 0.0;
        double baseSellPrice = 0.0;
        double baseMinBuyPrice = 0.0;
        double baseMaxBuyPrice = 0.0;
        double baseMinSellPrice = 0.0;
        double baseMaxSellPrice = 0.0;
        int minAvailableStock = Integer.MAX_VALUE;
        int totalMinStock = 0;
        int totalMaxStock = 0;
        
        // Flags pour savoir si tous les ingrédients ont un prix à -1
        boolean allBuyPricesNegative = true;
        boolean allSellPricesNegative = true;
        
        // Parcourir les ingrédients une seule fois
        for (ItemStack ingredient : ingredients) {
            if (ingredient == null || ingredient.getType() == Material.AIR) {
                continue;
            }
            
            // // // Récupérer toutes les données de l'ingrédient en une fois
            // // String ingredientID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
            // // String ingredientShopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();
            // String ingredientShopID = null;
            // String ingredientID = null;

            // try {
            //     // Shop shop = ShopGuiPlusApi.getShop(shopID);
            //     // ShopItem shopItem = shop.getShopItem(itemID);
            //     // if (shopItem != null) {
            //     //     ingredientID = shopItem.getId();
            //     //     ingredientShopID = shop.getId();
            //     // }
            //     // ingredientShopID = shop.getId();
            //     // ingredientID = shop.getShopItem(itemID).getId();
                
            //     // if (ingredientID == null) {
            //     //     ingredientShopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();
            //     //     ingredientID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
            //     // }
            //     // D'abord, essayer de trouver l'ingrédient dans le shop courant
            //     Shop currentShop = ShopGuiPlusApi.getShop(shopID);
            //     for (ShopItem item2 : currentShop.getShopItems()) {
            //         if (item2.getItem().getType() == ingredient.getType()) {
            //             ingredientID = item2.getId();
            //             ingredientShopID = shopID;
            //             break;
            //         }
            //     }
                
            //     // Si non trouvé dans le shop courant, chercher dans tous les shops
            //     if (ingredientID == null) {
            //         ShopItem shopItem = ShopGuiPlusApi.getItemStackShopItem(ingredient);
            //         if (shopItem != null) {
            //             ingredientID = shopItem.getId();
            //             ingredientShopID = shopItem.getShop().getId();
            //         }
            //     }
            // } catch (Exception e) {
            //     ingredientShopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();
            //     ingredientID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
            // }

            // if (ingredientID == null || ingredientShopID == null) {
            //     DynaShopPlugin.getInstance().getLogger().warning("ID ou ShopID manquant pour l'ingrédient " + ingredient);
            //     continue; // Passer à l'ingrédient suivant si l'ID est manquant
            // // } else {
            // //     DynaShopPlugin.getInstance().getLogger().info("ID de l'ingrédient: " + ingredientID + ", ShopID: " + ingredientShopID);
            // //     // DynaShopPlugin.getInstance().getLogger().info("Ingrédient: " + ingredient);
            // //     // DynaShopPlugin.getInstance().getLogger().info("ItemStack: " + item);
            // }
            FoundItem foundItem = findItemInShops(shopID, ingredient);
            if (!foundItem.isFound()) {
                DynaShopPlugin.getInstance().getLogger().warning("ID ou ShopID manquant pour l'ingrédient " + ingredient);
                continue; // Passer à l'ingrédient suivant si l'ID est manquant
            }
            String ingredientID = foundItem.getItemID();
            String ingredientShopID = foundItem.getShopID();

            // Éviter les boucles infinies
            if (visitedItems.contains(ingredientID)) {
                continue;
            }
            visitedItems.add(ingredientID);
            
            // // Obtenir le type de l'ingrédient
            // DynaShopType ingredientType = getIngredientType(ingredient);
            
            DynamicPrice ingredientPrice = DynaShopPlugin.getInstance().getDynaShopListener().getOrLoadPrice(ingredientShopID, ingredientID, ingredient);
            if (ingredientPrice == null) {
                DynaShopPlugin.getInstance().getLogger().warning("Prix non trouvé pour l'ingrédient " + ingredientID + " dans le shop " + ingredientShopID);
                continue; // Passer à l'ingrédient suivant si le prix n'est pas trouvé
            }
                
            // Utiliser les valeurs récupérées
            double ingredientBuyPrice = ingredientPrice.getBuyPrice();
            double ingredientSellPrice = ingredientPrice.getSellPrice();
            double ingredientMinBuyPrice = ingredientPrice.getMinBuyPrice();
            double ingredientMaxBuyPrice = ingredientPrice.getMaxBuyPrice();
            double ingredientMinSellPrice = ingredientPrice.getMinSellPrice();
            double ingredientMaxSellPrice = ingredientPrice.getMaxSellPrice();
            int ingredientStock = ingredientPrice.getStock();
            int ingredientMinStock = ingredientPrice.getMinStock();
            int ingredientMaxStock = ingredientPrice.getMaxStock();
            
            // Calculer la contribution de cet ingrédient aux différentes valeurs
            int amount = ingredient.getAmount();
            
            // Ne tenir compte du prix d'achat que s'il est positif
            if (ingredientBuyPrice >= 0) {
                basePrice += ingredientBuyPrice * amount;
                baseMinBuyPrice += ingredientMinBuyPrice * amount;
                baseMaxBuyPrice += ingredientMaxBuyPrice * amount;
                allBuyPricesNegative = false;
            }
            
            // Ne tenir compte du prix de vente que s'il est positif
            if (ingredientSellPrice >= 0) {
                baseSellPrice += ingredientSellPrice * amount;
                baseMinSellPrice += ingredientMinSellPrice * amount;
                baseMaxSellPrice += ingredientMaxSellPrice * amount;
                allSellPricesNegative = false;
            }

            // basePrice += ingredientBuyPrice * amount;
            // baseSellPrice += ingredientSellPrice * amount;
            // baseMinBuyPrice += ingredientMinBuyPrice * amount;
            // baseMaxBuyPrice += ingredientMaxBuyPrice * amount;
            // baseMinSellPrice += ingredientMinSellPrice * amount;
            // baseMaxSellPrice += ingredientMaxSellPrice * amount;
            
            // Calcul du stock disponible pour cet ingrédient
            int availableForCrafting = ingredientStock / amount;
            minAvailableStock = Math.min(minAvailableStock, availableForCrafting);

            // Stock minimum
            int minAvailableForCrafting = ingredientMinStock / amount;
            totalMinStock += minAvailableForCrafting;

            // Stock maximum
            int maxAvailableForCrafting = ingredientMaxStock / amount;
            totalMaxStock += maxAvailableForCrafting;
            
            // Optimisation: sortir tôt si on trouve un stock zéro
            if (minAvailableStock == 0) break;
        }
        
        // Appliquer le modificateur de recette
        double modifier = getRecipeModifier(item);
        
        double finalBuyPrice = allBuyPricesNegative ? -1.0 : basePrice * modifier;
        double finalSellPrice = allSellPricesNegative ? -1.0 : baseSellPrice * modifier;
        double finalMinBuyPrice = allBuyPricesNegative ? -1.0 : baseMinBuyPrice * modifier;
        double finalMaxBuyPrice = allBuyPricesNegative ? -1.0 : baseMaxBuyPrice * modifier;
        double finalMinSellPrice = allSellPricesNegative ? -1.0 : baseMinSellPrice * modifier;
        double finalMaxSellPrice = allSellPricesNegative ? -1.0 : baseMaxSellPrice * modifier;
        
        // Vérifier que le prix de vente n'est pas supérieur au prix d'achat
        if (finalBuyPrice >= 0 && finalSellPrice >= 0 && finalSellPrice > finalBuyPrice - DynamicPrice.MIN_MARGIN) {
            finalSellPrice = finalBuyPrice - DynamicPrice.MIN_MARGIN;
        }
        
        // Vérifier que les bornes sont respectées
        if (finalBuyPrice >= 0) {
            finalBuyPrice = Math.max(finalMinBuyPrice, Math.min(finalBuyPrice, finalMaxBuyPrice));
        }
        if (finalSellPrice >= 0) {
            finalSellPrice = Math.max(finalMinSellPrice, Math.min(finalSellPrice, finalMaxSellPrice));
        }
        
        // Ajuster le stock maximum et actuel
        int finalStock = (minAvailableStock == Integer.MAX_VALUE) ? 0 : minAvailableStock;
        
        // Mettre en cache tous les résultats
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyPrice", finalBuyPrice);
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellPrice", finalSellPrice);
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyDynamic.min", finalMinBuyPrice);
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "buyDynamic.max", finalMaxBuyPrice);
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellDynamic.min", finalMinSellPrice);
        DynaShopPlugin.getInstance().cacheRecipePrice(shopID, itemID, "sellDynamic.max", finalMaxSellPrice);
        DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "stock", finalStock);
        DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "minstock", totalMinStock);
        DynaShopPlugin.getInstance().cacheRecipeStock(shopID, itemID, "maxstock", totalMaxStock);
        
        return new RecipeCalculationResult(
            finalBuyPrice, finalSellPrice,
            finalMinBuyPrice, finalMaxBuyPrice,
            finalMinSellPrice, finalMaxSellPrice,
            finalStock, totalMinStock, totalMaxStock
        );
    }

    /**
     * Version asynchrone pour calculer toutes les valeurs de recette en une fois
     */
    public void calculateRecipeValuesAsync(String shopID, String itemID, ItemStack item, Consumer<RecipeCalculationResult> callback) {
        CompletableFuture.supplyAsync(() -> {
            try {
                return calculateRecipeValues(shopID, itemID, item, new ArrayList<>());
            } catch (Exception e) {
                DynaShopPlugin.getInstance().getLogger().warning("Erreur lors du calcul des valeurs pour " 
                    + shopID + ":" + itemID + ": " + e.getMessage());
                // Valeurs par défaut en cas d'erreur
                return new RecipeCalculationResult(10.0, 8.0, 5.0, 20.0, 4.0, 16.0, 0, 0, 0);
            }
        }, recipeExecutor).thenAcceptAsync(result -> {
            Bukkit.getScheduler().runTask(DynaShopPlugin.getInstance(), () -> {
                try {
                    callback.accept(result);
                } catch (Exception e) {
                    DynaShopPlugin.getInstance().getLogger().warning("Erreur dans le callback: " + e.getMessage());
                }
            });
        });
    }

    /**
     * Nettoie les ressources lors de la fermeture du plugin
     */
    public void shutdown() {
        recipeExecutor.shutdown();
        highPriorityExecutor.shutdown();
        try {
            if (!recipeExecutor.awaitTermination(500, TimeUnit.MILLISECONDS)) {
                recipeExecutor.shutdownNow();
            }
            if (!highPriorityExecutor.awaitTermination(500, TimeUnit.MILLISECONDS)) {
                highPriorityExecutor.shutdownNow();
            }
        } catch (InterruptedException e) {
            recipeExecutor.shutdownNow();
            highPriorityExecutor.shutdownNow();
        }
    }


    public double calculateBuyPrice(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
        return calculatePrice(shopID, itemID, item, "buyPrice", visitedItems);
    }

    public double calculateSellPrice(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
        return calculatePrice(shopID, itemID, item, "sellPrice", visitedItems);
    }

    public double calculatePrice(String shopID, String itemID, ItemStack item, String typePrice, List<String> visitedItems) {
        // // Protection contre les récursions trop profondes
        // if (visitedItems.size() > MAX_RECURSION_DEPTH) {
        //     return 10.0; // Valeur par défaut
        // }

        List<ItemStack> ingredients = getIngredients(shopID, itemID, item);
        ingredients = consolidateIngredients(ingredients);
        double basePrice = 0.0;

        // Calculer le prix de base en fonction des ingrédients
        for (ItemStack ingredient : ingredients) {
            if (ingredient == null || ingredient.getType() == Material.AIR) {
                continue; // Ignorer les ingrédients invalides
            }
            // Copier la liste des items visités pour éviter les modifications dans la récursion
            List<String> newVisitedItems = new ArrayList<>(visitedItems);
            double ingredientPrice = getIngredientPrice(shopID, ingredient, typePrice, newVisitedItems);
            basePrice += ingredientPrice * ingredient.getAmount(); // Multiplier par la quantité de l'ingrédient
        }

        // Appliquer le modificateur en fonction du type de recette
        double modifier = getRecipeModifier(item);
        return basePrice * modifier;
    }

    public int calculateStock(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
        List<ItemStack> ingredients = getIngredients(shopID, itemID, item);
        ingredients = consolidateIngredients(ingredients);

        int minAvailableStock = Integer.MAX_VALUE;
        for (ItemStack ingredient : ingredients) {
            if (ingredient == null || ingredient.getType() == Material.AIR) { continue; }

            List<String> newVisitedItems = new ArrayList<>(visitedItems);
            
            // Vérifier si l'ingrédient est en mode STOCK ou STATIC_STOCK
            FoundItem foundItem = findItemInShops(shopID, ingredient);
            if (!foundItem.isFound()) {
                continue;
            }
            
            String ingredientID = foundItem.getItemID();
            String ingredientShopID = foundItem.getShopID();
            
            // Vérifier le type de l'ingrédient
            DynaShopType ingredientType = DynaShopPlugin.getInstance().getShopConfigManager().getTypeDynaShop(ingredientShopID, ingredientID);
            
            // Ne calculer le stock que pour les items en mode STOCK ou STATIC_STOCK
            if (ingredientType != DynaShopType.STOCK && ingredientType != DynaShopType.STATIC_STOCK) {
                continue; // Ignorer cet ingrédient pour le calcul du stock
            }

            int ingredientStock = getIngredientStock(shopID, ingredient, newVisitedItems);
            if (ingredientStock < 0) {
                continue; // Ignorer les stocks négatifs (désactivés)
            }

            int availableForCrafting = ingredientStock / ingredient.getAmount();
            minAvailableStock = Math.min(minAvailableStock, availableForCrafting);

            if (minAvailableStock == 0) {
                break; // Pas besoin de continuer si le stock minimum est atteint
            }
        }

        return (minAvailableStock == Integer.MAX_VALUE) ? 0 : minAvailableStock;
    }

    /**
     * Version entièrement asynchrone du calcul de stock
     */
    public void calculateStockAsync(String shopID, String itemID, ItemStack item, Consumer<Integer> callback) {
        CompletableFuture.supplyAsync(() -> {
            try {
                List<String> visitedItems = new ArrayList<>();
                return calculateStock(shopID, itemID, item, visitedItems);
            } catch (Exception e) {
                DynaShopPlugin.getInstance().getLogger().warning("Erreur lors du calcul du stock pour " + shopID + ":" + itemID + ": " + e.getMessage());
                return 0;
            }
        }, recipeExecutor).thenAcceptAsync(stock -> {
            Bukkit.getScheduler().runTask(DynaShopPlugin.getInstance(), () -> {
                try {
                    callback.accept(stock);
                } catch (Exception e) {
                    DynaShopPlugin.getInstance().getLogger().warning("Erreur dans le callback de stock: " + e.getMessage());
                }
            });
        });
    }

    public int calculateMaxStock(String shopID, String itemID, ItemStack item, List<String> visitedItems) {
        List<ItemStack> ingredients = getIngredients(shopID, itemID, item);
        ingredients = consolidateIngredients(ingredients);
        int maxStock = 0;
        
        // Calculer le stock maximum en fonction des ingrédients
        for (ItemStack ingredient : ingredients) {
            if (ingredient == null || ingredient.getType() == Material.AIR) {
                continue; // Ignorer les ingrédients invalides
            }
            
            // Vérifier si l'ingrédient est en mode STOCK ou STATIC_STOCK
            FoundItem foundItem = findItemInShops(shopID, ingredient);
            if (!foundItem.isFound()) {
                continue;
            }
            
            String ingredientID = foundItem.getItemID();
            String ingredientShopID = foundItem.getShopID();
            
            // Vérifier le type de l'ingrédient
            DynaShopType ingredientType = DynaShopPlugin.getInstance().getShopConfigManager()
                .getTypeDynaShop(ingredientShopID, ingredientID);
            
            // Ne calculer le stock max que pour les items en mode STOCK ou STATIC_STOCK
            if (ingredientType != DynaShopType.STOCK && ingredientType != DynaShopType.STATIC_STOCK) {
                continue; // Ignorer cet ingrédient pour le calcul du stock max
            }
            
            int ingredientMaxStock = getIngredientMaxStock(shopID, ingredient, visitedItems);
            if (ingredientMaxStock < 0) {
                continue; // Ignorer les stocks max négatifs (désactivés)
            }
            
            int availableMaxStock = ingredientMaxStock / ingredient.getAmount();
            maxStock += availableMaxStock;
        }
        
        return maxStock;
    }

    /**
     * Version entièrement asynchrone du calcul de prix avec priorisation
     */
    public void calculatePriceAsync(String shopID, String itemID, ItemStack item, String typePrice, Consumer<Double> callback) {
        // Vérifier si c'est un item populaire ou fréquemment consulté
        boolean isHighPriority = isPopularItem(shopID, itemID);
        
        // Définir le fournisseur de calcul
        Supplier<Double> priceCalculator = () -> {
            try {
                List<String> visitedItems = new ArrayList<>();
                return calculatePrice(shopID, itemID, item, typePrice, visitedItems);
            } catch (Exception e) {
                DynaShopPlugin.getInstance().getLogger().warning("Erreur lors du calcul du prix pour " + shopID + ":" + itemID + ": " + e.getMessage());
                return 10.0; // Valeur par défaut en cas d'erreur
            }
        };
        
        // Ajuster la priorité d'exécution
        ExecutorService executor = isHighPriority ? highPriorityExecutor : recipeExecutor;
        
        CompletableFuture.supplyAsync(priceCalculator, executor)
            .thenAcceptAsync(price -> {
                Bukkit.getScheduler().runTask(DynaShopPlugin.getInstance(), () -> {
                    try {
                        callback.accept(price);
                    } catch (Exception e) {
                        DynaShopPlugin.getInstance().getLogger().warning("Erreur dans le callback de prix: " + e.getMessage());
                    }
                });
            });
    }

    public List<ItemStack> getIngredients(String shopID, String itemID, ItemStack item) {
        List<ItemStack> ingredients = new ArrayList<>();
        RecipeType typeRecipe = DynaShopPlugin.getInstance().getShopConfigManager().getTypeRecipe(shopID, itemID);
        String cacheKey = shopID + ":" + itemID;

        // Vérifier le cache
        if (ingredientsCache.containsKey(cacheKey) && 
            System.currentTimeMillis() - cacheTimestamps.getOrDefault(cacheKey, 0L) < CACHE_DURATION) {
            return new ArrayList<>(ingredientsCache.get(cacheKey));
        }
        
        // 1. Utiliser la recette définie manuellement dans la configuration si elle existe
        if (DynaShopPlugin.getInstance().getShopConfigManager().getItemValue(shopID, itemID, "recipe.pattern", Boolean.class).orElse(false)) {
            // Code existant pour les recettes définies manuellement...
            ConfigurationSection recipeSection = DynaShopPlugin.getInstance().getShopConfigManager().getSection(shopID, itemID, "recipe");
            Recipe recipeConfig = DynaShopPlugin.getInstance().getCustomRecipeManager().loadRecipeFromShopConfig(shopID, itemID, recipeSection).orElse(null);
            if (recipeConfig != null) {
                // Code existant pour extraire les ingrédients...
                // Mettre en cache et retourner
                ingredientsCache.put(cacheKey, new ArrayList<>(ingredients));
                cacheTimestamps.put(cacheKey, System.currentTimeMillis());
                return ingredients;
            }
        }
        
        // 2. Récupérer toutes les recettes pour l'item
        List<Recipe> allRecipes = DynaShopPlugin.getInstance().getServer().getRecipesFor(item);
        
        // 2.1 Filtrer les recettes par type (SHAPED, SHAPELESS, FURNACE, etc.)
        List<Recipe> typeFilteredRecipes = allRecipes.stream()
            .filter(recipe -> {
                switch (typeRecipe) {
                    case SHAPED: return recipe instanceof ShapedRecipe;
                    case SHAPELESS: return recipe instanceof ShapelessRecipe;
                    case FURNACE: return recipe instanceof FurnaceRecipe;
                    default: return true;
                }
            })
            .collect(Collectors.toList());
        
        // 2.2 Trier les recettes pour donner la priorité au même namespace que l'item
        NamespacedKey itemKey = null;
        if (item.hasItemMeta() && item.getItemMeta().hasLocalizedName()) {
            String localName = item.getItemMeta().getLocalizedName();
            if (localName.contains(":")) {
                String[] parts = localName.split(":");
                Plugin plugin = DynaShopPlugin.getInstance().getServer().getPluginManager().getPlugin(parts[0]);
                if (plugin != null) {
                    itemKey = new NamespacedKey(plugin, parts[1]);
                }
            }
        }
        if (itemKey == null && item.hasItemMeta() && item.getItemMeta().hasDisplayName()) {
            String displayName = item.getItemMeta().getDisplayName();
            if (displayName.contains(":")) {
                String[] parts = displayName.split(":");
                Plugin plugin = DynaShopPlugin.getInstance().getServer().getPluginManager().getPlugin(parts[0]);
                if (plugin != null) {
                    itemKey = new NamespacedKey(plugin, parts[1]);
                }
            }
        }
        final NamespacedKey finalItemKey = itemKey;
        if (finalItemKey != null) {
            // Trier les recettes pour donner la priorité à celles du même namespace
            typeFilteredRecipes.sort((r1, r2) -> {
                NamespacedKey key1 = getRecipeKey(r1);
                NamespacedKey key2 = getRecipeKey(r2);
                
                if (key1 != null && key1.getNamespace().equals(finalItemKey.getNamespace())) {
                    return -1; // r1 est du même namespace que l'item, priorité plus élevée
                } else if (key2 != null && key2.getNamespace().equals(finalItemKey.getNamespace())) {
                    return 1; // r2 est du même namespace que l'item, priorité plus élevée
                }
                return 0; // Pas de différence de priorité
            });
        }
        
        // 3. Chercher d'abord une recette 9-1 (comme pour IRON_NUGGET -> IRON_INGOT)
        if (typeRecipe == RecipeType.SHAPED) {
            for (Recipe recipe : typeFilteredRecipes) {
                if (recipe instanceof ShapedRecipe shapedRecipe) {
                    // Vérifier si c'est une recette 9-1 (tous les ingrédients identiques)
                    // ShapedRecipe shapedRecipe = (ShapedRecipe) recipe;
                    
                    // Vérifier si c'est une recette 9-1 (tous les ingrédients sont identiques)
                    List<ItemStack> recipeIngredients = new ArrayList<>();
                    Material firstMaterial = null;
                    boolean allSame = true;
                    int count = 0;
                    
                    for (ItemStack ingredient : shapedRecipe.getIngredientMap().values()) {
                        if (ingredient != null && ingredient.getType() != Material.AIR) {
                            if (firstMaterial == null) {
                                firstMaterial = ingredient.getType();
                            } else if (firstMaterial != ingredient.getType()) {
                                allSame = false;
                            }
                            count++;
                            recipeIngredients.add(new ItemStack(ingredient.getType(), 1));
                        }
                    }
                    
                    // Si tous les ingrédients sont les mêmes et qu'il y en a 9, c'est probablement notre recette
                    if (allSame && count == 9 && !recipeIngredients.isEmpty()) {
                        // Mettre en cache et retourner
                        ingredientsCache.put(cacheKey, recipeIngredients);
                        cacheTimestamps.put(cacheKey, System.currentTimeMillis());
                        return recipeIngredients;
                    }
                }
            }
        }
        
        // 4. Si aucune recette 9-1 n'est trouvée, utiliser la première recette du type approprié
        if (ingredients.isEmpty() && !typeFilteredRecipes.isEmpty()) {
            Recipe selectedRecipe = typeFilteredRecipes.get(0); // Prendre la première recette après le tri
            
            switch (typeRecipe) {
                case SHAPED -> {
                    if (selectedRecipe instanceof ShapedRecipe shapedRecipe) {
                        for (ItemStack ingredient : shapedRecipe.getIngredientMap().values()) {
                            if (ingredient != null && ingredient.getType() != Material.AIR) {
                                ItemStack fixed = new ItemStack(ingredient.getType(), 1);
                                ingredients.add(fixed);
                            }
                        }
                    }
                }
                case SHAPELESS -> {
                    if (selectedRecipe instanceof ShapelessRecipe shapelessRecipe) {
                        for (ItemStack ingredient : shapelessRecipe.getIngredientList()) {
                            if (ingredient != null && ingredient.getType() != Material.AIR) {
                                ItemStack fixed = new ItemStack(ingredient.getType(), 1);
                                ingredients.add(fixed); // Ajouter une copie de l'ItemStack
                            }
                        }
                    }
                }
                case FURNACE -> {
                    if (selectedRecipe instanceof FurnaceRecipe furnaceRecipe) {
                        ItemStack fixed = new ItemStack(furnaceRecipe.getInput().getType(), 1);
                        ingredients.add(fixed); // Ajouter une copie de l'ItemStack
                    }
                }
                default -> {
                    // Aucun traitement pour les autres types
                }
            }
        }
        
        // Mettre en cache et retourner les résultats
        ingredientsCache.put(cacheKey, new ArrayList<>(ingredients));
        cacheTimestamps.put(cacheKey, System.currentTimeMillis());
        return ingredients;
    }

    // Méthode utilitaire pour obtenir la clé d'une recette
    private NamespacedKey getRecipeKey(Recipe recipe) {
        if (recipe instanceof ShapedRecipe) {
            return ((ShapedRecipe) recipe).getKey();
        } else if (recipe instanceof ShapelessRecipe) {
            return ((ShapelessRecipe) recipe).getKey();
        } else if (recipe instanceof FurnaceRecipe) {
            return ((FurnaceRecipe) recipe).getKey();
        }
        return null;
    }

    private double getIngredientPrice(String shopID, ItemStack ingredient, String typePrice, List<String> visitedItems) {
        // Trouver l'item dans les shops
        FoundItem foundItem = findItemInShops(shopID, ingredient);
        if (!foundItem.isFound()) {
            DynaShopPlugin.getInstance().getLogger().warning("Impossible de trouver l'ingrédient " + ingredient + " dans le shop " + shopID);
            return 0; // Retourner 0 si l'ingrédient n'est pas trouvé
        }
        
        String ingredientID = foundItem.getItemID();
        String ingredientShopID = foundItem.getShopID();
        
        // Vérifier si l'item a déjà été visité pour éviter les boucles infinies
        if (visitedItems.contains(ingredientID)) {
            return 0.0; // Retourner 0 pour éviter une boucle infinie
        }
        visitedItems.add(ingredientID);
        
        // Utiliser getOrLoadPrice pour obtenir toutes les informations de prix
        DynamicPrice price = DynaShopPlugin.getInstance().getDynaShopListener()
            .getOrLoadPrice(ingredientShopID, ingredientID, ingredient);
        
        if (price == null) {
            return 10.0; // Valeur par défaut en cas d'erreur
        }
        
        // Retourner le prix demandé selon le type
        if (typePrice.equals("buyPrice")) {
            return price.getBuyPrice();
        } else if (typePrice.equals("sellPrice")) {
            return price.getSellPrice();
        } else if (typePrice.equals("buyDynamic.min")) {
            return price.getMinBuyPrice();
        } else if (typePrice.equals("buyDynamic.max")) {
            return price.getMaxBuyPrice();
        } else if (typePrice.equals("sellDynamic.min")) {
            return price.getMinSellPrice();
        } else if (typePrice.equals("sellDynamic.max")) {
            return price.getMaxSellPrice();
        }
        
        return 10.0; // Valeur par défaut si le type de prix n'est pas reconnu
    }

    // public List<ItemStack> consolidateIngredients(List<ItemStack> ingredients) {
    //     // Map<Material, Integer> ingredientCounts = new HashMap<>();
    //     Map<Material, Integer> ingredientCounts = new EnumMap<>(Material.class);

    //     for (ItemStack ingredient : ingredients) {
    //         Material material = ingredient.getType();
    //         int amount = ingredientCounts.getOrDefault(material, 0) + ingredient.getAmount();
    //         ingredientCounts.put(material, amount);
    //     }

    //     List<ItemStack> consolidated = new ArrayList<>();
    //     for (Map.Entry<Material, Integer> entry : ingredientCounts.entrySet()) {
    //         ItemStack itemStack = new ItemStack(entry.getKey());
    //         itemStack.setAmount(entry.getValue());
    //         consolidated.add(itemStack);
    //     }

    //     return consolidated;
    // }

    public List<ItemStack> consolidateIngredients(List<ItemStack> ingredients) {
        Map<String, ItemStack> consolidatedMap = new HashMap<>();

        for (ItemStack ingredient : ingredients) {
            if (ingredient == null || ingredient.getType() == Material.AIR) {
                continue; // Ignorer les items nuls ou d'air
            }

            String key = createIngredientKey(ingredient);
            if (consolidatedMap.containsKey(key)) {
                // Si l'item existe déjà, ajouter la quantité
                ItemStack existing = consolidatedMap.get(key);
                existing.setAmount(existing.getAmount() + ingredient.getAmount());
            } else {
                // Sinon, ajouter l'item à la map
                consolidatedMap.put(key, ingredient.clone()); // Cloner pour éviter les références partagées
            }
        }
        return new ArrayList<>(consolidatedMap.values());
    }

    public String createIngredientKey(ItemStack ingredient) {
        StringBuilder keyBuilder = new StringBuilder();
        keyBuilder.append(ingredient.getType().name());
        if (ingredient.hasItemMeta()) {
            ItemMeta meta = ingredient.getItemMeta();
            if (meta.hasDisplayName()) {
                keyBuilder.append(":").append(meta.getDisplayName());
            }
            if (meta.hasLore()) {
                keyBuilder.append(":").append(String.join(",", meta.getLore()));
            }
            if (meta.hasCustomModelData()) {
                keyBuilder.append(":").append(meta.getCustomModelData());
            }
            if (meta.hasEnchants()) {
                for (Map.Entry<Enchantment, Integer> entry : meta.getEnchants().entrySet()) {
                    keyBuilder.append(":").append(entry.getKey().getKey().getKey()).append("=").append(entry.getValue());
                }
            }
            if (meta.hasAttributeModifiers()) {
                for (AttributeModifier modifier : meta.getAttributeModifiers().values()) {
                    keyBuilder.append(":").append(modifier.getName()).append("=").append(modifier.getAmount());
                }
            }
        }
        return keyBuilder.toString();
    }

    private double getRecipeModifier(ItemStack item) {
        // Déterminer le type de recette et appliquer le modificateur correspondant
        // for (Recipe recipe : item.getItemMeta().getPersistentDataContainer().getRecipesFor(item)) {
        for (Recipe recipe : DynaShopPlugin.getInstance().getServer().getRecipesFor(item)) {
            if (recipe instanceof ShapedRecipe) {
                // return config.getDouble("actions.shaped", 1.0);
                return DynaShopPlugin.getInstance().getDataConfig().getShapedValue();
            } else if (recipe instanceof ShapelessRecipe) {
                // return config.getDouble("actions.shapeless", 1.0);
                return DynaShopPlugin.getInstance().getDataConfig().getShapelessValue();
            } else if (recipe instanceof FurnaceRecipe) {
                // return config.getDouble("actions.furnace", 1.0);
                return DynaShopPlugin.getInstance().getDataConfig().getFurnaceValue();
            }
        }

        // Retourner un modificateur par défaut si aucune recette n'est trouvée
        return 1.0;
    }

    public int getIngredientStock(String shopID, ItemStack ingredient, List<String> visitedItems) {
        // Récupérer l'ID de l'item dans le shop
        FoundItem foundItem = findItemInShops(shopID, ingredient);
        if (!foundItem.isFound()) {
            DynaShopPlugin.getInstance().getLogger().warning("Impossible de trouver l'ingrédient " + ingredient + " dans le shop " + shopID);
            return -1; // Retourner -1 si l'ingrédient n'est pas trouvé
        }
        
        String ingredientID = foundItem.getItemID();
        String ingredientShopID = foundItem.getShopID();

        // Vérifier le type de l'ingrédient
        DynaShopType ingredientType = DynaShopPlugin.getInstance().getShopConfigManager()
            .getTypeDynaShop(ingredientShopID, ingredientID);
        
        // Ne récupérer le stock que si l'item est en mode STOCK ou STATIC_STOCK
        if (ingredientType != DynaShopType.STOCK && ingredientType != DynaShopType.STATIC_STOCK) {
            return -1; // Retourner -1 pour indiquer que l'item n'est pas en mode stock
        }

        // Vérifier si l'item a déjà été visité
        if (visitedItems.contains(ingredientID)) {
            return 0; // Retourner 0 pour éviter une boucle infinie
        }
        // Ajouter l'item à la liste des visités
        visitedItems.add(ingredientID);

        // Récupérer le stock de l'item
        Optional<Integer> stockOptional = DynaShopPlugin.getInstance().getItemDataManager()
            .getStock(ingredientShopID, ingredientID);
        
        if (stockOptional.isPresent()) {
            return stockOptional.get();
        }
        
        return 0; // Retourner 0 si le stock n'est pas trouvé
    }

    public int getIngredientMaxStock(String shopID, ItemStack ingredient, List<String> visitedItems) {
        // Récupérer l'ID de l'item dans le shop
        FoundItem foundItem = findItemInShops(shopID, ingredient);
        if (!foundItem.isFound()) {
            DynaShopPlugin.getInstance().getLogger().warning("Impossible de trouver l'ingrédient " + ingredient + " dans le shop " + shopID);
            return -1; // Retourner -1 si l'ingrédient n'est pas trouvé
        }
        
        String ingredientID = foundItem.getItemID();
        String ingredientShopID = foundItem.getShopID();

        // Vérifier le type de l'ingrédient
        DynaShopType ingredientType = DynaShopPlugin.getInstance().getShopConfigManager()
            .getTypeDynaShop(ingredientShopID, ingredientID);
        
        // Ne récupérer le stock max que si l'item est en mode STOCK ou STATIC_STOCK
        if (ingredientType != DynaShopType.STOCK && ingredientType != DynaShopType.STATIC_STOCK) {
            return -1; // Retourner -1 pour indiquer que l'item n'est pas en mode stock
        }

        // Vérifier si l'item a déjà été visité
        if (visitedItems.contains(ingredientID)) {
            return 0; // Retourner 0 pour éviter une boucle infinie
        }
        // Ajouter l'item à la liste des visités
        visitedItems.add(ingredientID);

        // Récupérer le stock maximum de l'item
        Optional<Integer> maxStockOptional = DynaShopPlugin.getInstance().getShopConfigManager()
            .getItemValue(ingredientShopID, ingredientID, "stock.max", Integer.class);
        
        if (maxStockOptional.isPresent()) {
            return maxStockOptional.get();
        }
        
        return 0; // Retourner 0 si le stock maximum n'est pas trouvé
    }

    //     // Récupérer l'ID de l'item dans le shop
    //     String itemID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
    //     String shopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();

    //     // Récupérer le stock maximum de l'item
    //     return DynaShopPlugin.getInstance().getShopConfigManager().getItemValue(shopID, itemID, "stock.max", Integer.class).orElse(1000);
    // }

    public DynaShopType getItemType(String shopID, String itemID) {
        // Récupérer le type d'item depuis la configuration
        return DynaShopPlugin.getInstance().getShopConfigManager().getTypeDynaShop(shopID, itemID);
    }

    public DynaShopType getIngredientType(String shopID, ItemStack ingredient) {
        // Récupérer l'ID de l'item dans le shop
        // String itemID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getId();
        // String shopID = ShopGuiPlusApi.getItemStackShopItem(ingredient).getShop().getId();
        FoundItem foundItem = findItemInShops(shopID, ingredient);
        if (!foundItem.isFound()) {
            DynaShopPlugin.getInstance().getLogger().warning("Impossible de trouver l'ingrédient " + ingredient + " dans le shop " + shopID);
            return DynaShopType.UNKNOWN; // Retourner un type inconnu si l'ingrédient n'est pas trouvé
        }
        String ingredientID = foundItem.getItemID();
        String ingredientShopID = foundItem.getShopID();
        
        // Récupérer le type d'item depuis la configuration
        return DynaShopPlugin.getInstance().getShopConfigManager().getTypeDynaShop(ingredientShopID, ingredientID);
    }

    // public int calculateStock(String shopID, String itemID, ItemStack item) {
    //     // Récupérer le stock de l'item
    //     Optional<Integer> stockOptional = DynaShopPlugin.getInstance().getItemDataManager().getStock(shopID, itemID);
    //     if (stockOptional.isPresent()) {
    //         return stockOptional.get();
    //     }
    //     return 0; // Retourner 0 si le stock n'est pas trouvé
    // }

    // public int calculateMaxStock(String shopID, String itemID) {
    //     // Récupérer le stock maximum de l'item
    //     return DynaShopPlugin.getInstance().getShopConfigManager().getItemValue(shopID, itemID, "stock.max", Integer.class).orElse(1000);
    // }

    /**
     * Détermine si un item est considéré comme populaire ou fréquemment consulté
     * @param shopID L'ID du shop
     * @param itemID L'ID de l'item
     * @return true si l'item est populaire, false sinon
     */
    public boolean isPopularItem(String shopID, String itemID) {
        String key = shopID + ":" + itemID;
        
        // Vérifier d'abord si l'item est dans la liste prédéfinie des items populaires
        if (popularItems.contains(key)) {
            return true;
        }
        
        // Vérifier ensuite si l'item a été fréquemment consulté
        int accessCount = itemAccessCounter.getOrDefault(key, 0);
        
        // Incrémenter le compteur d'accès
        itemAccessCounter.put(key, accessCount + 1);
        
        // Si l'item devient populaire, l'ajouter à la liste
        if (accessCount + 1 >= POPULAR_THRESHOLD && !popularItems.contains(key)) {
            popularItems.add(key);
            return true;
        }
        
        return accessCount >= POPULAR_THRESHOLD;
    }

    /**
     * Charge la liste des items populaires depuis la configuration
     */
    private void loadPopularItems() {
        List<String> configPopularItems = config.getStringList("popular-items");
        if (configPopularItems != null && !configPopularItems.isEmpty()) {
            popularItems.addAll(configPopularItems);
        }
    }

    /**
     * Classe utilitaire pour stocker les informations d'un item trouvé
     */
    public class FoundItem {
        private final String shopID;
        private final String itemID;
        private final boolean found;
        
        public FoundItem(String shopID, String itemID, boolean found) {
            this.shopID = shopID;
            this.itemID = itemID;
            this.found = found;
        }
        
        public String getShopID() { return shopID; }
        public String getItemID() { return itemID; }
        public boolean isFound() { return found; }
    }

    /**
     * Trouve un item dans les shops, en cherchant d'abord dans le shop spécifié
     * puis dans tous les autres shops si nécessaire
     * 
     * @param preferredShopID Le shop où chercher d'abord
     * @param ingredient L'ingrédient à chercher
     * @return Un objet FoundItem contenant les informations de l'item trouvé
     */
    /**
     * Version améliorée de findItemInShops qui se coordonne avec getIngredients
     */
    public FoundItem findItemInShops(String preferredShopID, ItemStack ingredient) {
        // boolean debug = DynaShopPlugin.getInstance().isDebug();
        boolean debug = true; // Toujours activer le debug pour cette méthode
        
        try {
            // Étape 1: Utiliser le comparateur intégré de ShopGUIPlus (la méthode la plus fiable)
            try {
                // Chercher d'abord dans le shop préféré
                Shop preferredShop = ShopGuiPlusApi.getShop(preferredShopID);
                if (preferredShop != null) {
                    for (ShopItem item : preferredShop.getShopItems()) {
                        if (ShopGuiPlusApi.getPlugin().getItemManager().compare(ingredient, item.getItem())) {
                            if (debug) DynaShopPlugin.getInstance().getLogger().info("Item trouvé via comparateur dans shop préféré: " + item.getId());
                            return new FoundItem(preferredShopID, item.getId(), true);
                        }
                    }
                }
                
                // Puis dans tous les autres shops
                for (Shop shop : ShopGuiPlusApi.getPlugin().getShopManager().getShops()) {
                    if (!shop.getId().equals(preferredShopID)) {
                        for (ShopItem item : shop.getShopItems()) {
                            if (ShopGuiPlusApi.getPlugin().getItemManager().compare(ingredient, item.getItem())) {
                                if (debug) DynaShopPlugin.getInstance().getLogger().info("Item trouvé via comparateur dans shop: " + shop.getId());
                                return new FoundItem(shop.getId(), item.getId(), true);
                            }
                        }
                    }
                }
            } catch (Exception e) {
                if (debug) DynaShopPlugin.getInstance().getLogger().warning("Erreur lors de la comparaison via API: " + e.getMessage());
            }
            
            // // Étape 2: Utiliser NBT-API si disponible (pour les items custom)
            // try {
            //     if (de.tr7zw.changeme.nbtapi.NBTItem.hasNBTData(ingredient)) {
            //         NBTItem nbtIngredient = new NBTItem(ingredient);
                    
            //         // Chercher dans le shop préféré
            //         Shop preferredShop = ShopGuiPlusApi.getShop(preferredShopID);
            //         if (preferredShop != null) {
            //             for (ShopItem shopItem : preferredShop.getShopItems()) {
            //                 if (ingredient.getType() == shopItem.getItem().getType() && 
            //                     compareWithNBT(nbtIngredient, new NBTItem(shopItem.getItem()))) {
            //                     return new FoundItem(preferredShopID, shopItem.getId(), true);
            //                 }
            //             }
            //         }
                    
            //         // Chercher dans tous les shops
            //         for (Shop shop : ShopGuiPlusApi.getPlugin().getShopManager().getShops()) {
            //             for (ShopItem shopItem : shop.getShopItems()) {
            //                 if (ingredient.getType() == shopItem.getItem().getType() && 
            //                     compareWithNBT(nbtIngredient, new NBTItem(shopItem.getItem()))) {
            //                     return new FoundItem(shop.getId(), shopItem.getId(), true);
            //                 }
            //             }
            //         }
            //     }
            // } catch (Exception e) {
            //     if (debug) DynaShopPlugin.getInstance().getLogger().warning("Erreur lors de la comparaison NBT: " + e.getMessage());
            // }
            
            // Étape 3: Dernier recours - recherche par type + métadonnées basiques
            Shop preferredShop = ShopGuiPlusApi.getShop(preferredShopID);
            if (preferredShop != null) {
                for (ShopItem item : preferredShop.getShopItems()) {
                    if (item.getItem().getType() == ingredient.getType() && 
                        compareBasicMetadata(ingredient, item.getItem())) {
                        return new FoundItem(preferredShopID, item.getId(), true);
                    }
                }
            }
            
            // Chercher dans tous les shops
            for (Shop shop : ShopGuiPlusApi.getPlugin().getShopManager().getShops()) {
                for (ShopItem item : shop.getShopItems()) {
                    if (item.getItem().getType() == ingredient.getType() && 
                        compareBasicMetadata(ingredient, item.getItem())) {
                        return new FoundItem(shop.getId(), item.getId(), true);
                    }
                }
            }
            
            // Étape 4: Dernier recours - chercher juste par type
            if (preferredShop != null) {
                for (ShopItem item : preferredShop.getShopItems()) {
                    if (item.getItem().getType() == ingredient.getType()) {
                        return new FoundItem(preferredShopID, item.getId(), true);
                    }
                }
            }
            
            for (Shop shop : ShopGuiPlusApi.getPlugin().getShopManager().getShops()) {
                for (ShopItem item : shop.getShopItems()) {
                    if (item.getItem().getType() == ingredient.getType()) {
                        return new FoundItem(shop.getId(), item.getId(), true);
                    }
                }
            }
            
        } catch (Exception e) {
            DynaShopPlugin.getInstance().getLogger().warning("Erreur lors de la recherche de l'item " + ingredient.getType() + ": " + e.getMessage());
        }
        
        // Aucun item trouvé
        return new FoundItem(null, null, false);
    }

    // /**
    //  * Compare deux NBTItems pour vérifier s'ils sont similaires
    //  */
    // private boolean compareWithNBT(NBTItem nbt1, NBTItem nbt2) {
    //     // Vérifier les clés importantes
    //     String[] keys = {"id", "uuid", "custom-id", "customId", "CustomModelData", "mmoid"};
        
    //     for (String key : keys) {
    //         if (nbt1.hasKey(key) && nbt2.hasKey(key)) {
    //             if (nbt1.getString(key).equals(nbt2.getString(key))) {
    //                 return true;
    //             }
    //         }
    //     }
        
    //     // Si aucune clé spécifique ne correspond, comparer tout le NBT
    //     return nbt1.toString().equals(nbt2.toString());
    // }

    /**
     * Compare les métadonnées basiques de deux items
     */
    private boolean compareBasicMetadata(ItemStack item1, ItemStack item2) {
        if (!item1.hasItemMeta() || !item2.hasItemMeta()) {
            return true;
        }
        
        ItemMeta meta1 = item1.getItemMeta();
        ItemMeta meta2 = item2.getItemMeta();
        
        // Vérifier les noms d'affichage
        if (meta1.hasDisplayName() && meta2.hasDisplayName()) {
            if (!meta1.getDisplayName().equals(meta2.getDisplayName())) {
                return false;
            }
        }
        
        // Vérifier CustomModelData
        if (meta1.hasCustomModelData() && meta2.hasCustomModelData()) {
            return meta1.getCustomModelData() == meta2.getCustomModelData();
        }
        
        return true;
    }

}